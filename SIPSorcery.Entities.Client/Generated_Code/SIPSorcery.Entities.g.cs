//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.18033
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SIPSorcery.Entities
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// Die "CDR"-Entitätsklasse.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SIPSorcery.Entities")]
    public sealed partial class CDR : Entity
    {
        
        private string _accountCode;
        
        private string _adminMemberID;
        
        private Nullable<DateTime> _answeredAt;
        
        private string _answeredReason;
        
        private Nullable<int> _answeredStatus;
        
        private string _answeredTime;
        
        private string _bridgeID;
        
        private string _callID;
        
        private Nullable<decimal> _cost;
        
        private string _created;
        
        private string _direction;
        
        private string _dst;
        
        private string _dstHost;
        
        private string _dstURI;
        
        private Nullable<int> _duration;
        
        private string _fromHeader;
        
        private string _fromName;
        
        private string _fromUser;
        
        private string _hungupReason;
        
        private string _hungupTime;
        
        private string _id;
        
        private string _inProgressReason;
        
        private Nullable<int> _inProgressStatus;
        
        private string _inProgressTime;
        
        private string _inserted;
        
        private bool _isHangingUp;
        
        private string _localSocket;
        
        private string _owner;
        
        private Nullable<decimal> _postReconciliationBalance;
        
        private Nullable<decimal> _rate;
        
        private string _reconciliationResult;
        
        private string _remoteSocket;
        
        private string _reservationError;
        
        private Nullable<int> _ringDuration;
        
        private Nullable<int> _secondsReserved;
        
        #region Definitionen der Extensibility-Methode

        /// <summary>
        /// Diese Methode wird nach Abschluss der Initialisierung vom Konstruktor aufgerufen
        /// und kann für das weitere Objektsetup verwendet werden.
        /// </summary>
        partial void OnCreated();
        partial void OnAccountCodeChanging(string value);
        partial void OnAccountCodeChanged();
        partial void OnAdminMemberIDChanging(string value);
        partial void OnAdminMemberIDChanged();
        partial void OnAnsweredAtChanging(Nullable<DateTime> value);
        partial void OnAnsweredAtChanged();
        partial void OnAnsweredReasonChanging(string value);
        partial void OnAnsweredReasonChanged();
        partial void OnAnsweredStatusChanging(Nullable<int> value);
        partial void OnAnsweredStatusChanged();
        partial void OnAnsweredTimeChanging(string value);
        partial void OnAnsweredTimeChanged();
        partial void OnBridgeIDChanging(string value);
        partial void OnBridgeIDChanged();
        partial void OnCallIDChanging(string value);
        partial void OnCallIDChanged();
        partial void OnCostChanging(Nullable<decimal> value);
        partial void OnCostChanged();
        partial void OnCreatedChanging(string value);
        partial void OnCreatedChanged();
        partial void OnDirectionChanging(string value);
        partial void OnDirectionChanged();
        partial void OnDstChanging(string value);
        partial void OnDstChanged();
        partial void OnDstHostChanging(string value);
        partial void OnDstHostChanged();
        partial void OnDstURIChanging(string value);
        partial void OnDstURIChanged();
        partial void OnDurationChanging(Nullable<int> value);
        partial void OnDurationChanged();
        partial void OnFromHeaderChanging(string value);
        partial void OnFromHeaderChanged();
        partial void OnFromNameChanging(string value);
        partial void OnFromNameChanged();
        partial void OnFromUserChanging(string value);
        partial void OnFromUserChanged();
        partial void OnHungupReasonChanging(string value);
        partial void OnHungupReasonChanged();
        partial void OnHungupTimeChanging(string value);
        partial void OnHungupTimeChanged();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnInProgressReasonChanging(string value);
        partial void OnInProgressReasonChanged();
        partial void OnInProgressStatusChanging(Nullable<int> value);
        partial void OnInProgressStatusChanged();
        partial void OnInProgressTimeChanging(string value);
        partial void OnInProgressTimeChanged();
        partial void OnInsertedChanging(string value);
        partial void OnInsertedChanged();
        partial void OnIsHangingUpChanging(bool value);
        partial void OnIsHangingUpChanged();
        partial void OnLocalSocketChanging(string value);
        partial void OnLocalSocketChanged();
        partial void OnOwnerChanging(string value);
        partial void OnOwnerChanged();
        partial void OnPostReconciliationBalanceChanging(Nullable<decimal> value);
        partial void OnPostReconciliationBalanceChanged();
        partial void OnRateChanging(Nullable<decimal> value);
        partial void OnRateChanged();
        partial void OnReconciliationResultChanging(string value);
        partial void OnReconciliationResultChanged();
        partial void OnRemoteSocketChanging(string value);
        partial void OnRemoteSocketChanged();
        partial void OnReservationErrorChanging(string value);
        partial void OnReservationErrorChanged();
        partial void OnRingDurationChanging(Nullable<int> value);
        partial void OnRingDurationChanged();
        partial void OnSecondsReservedChanging(Nullable<int> value);
        partial void OnSecondsReservedChanged();

        #endregion
        
        
        /// <summary>
        /// Initialisiert eine neue Instanz der <see cref="CDR"/>-Klasse.
        /// </summary>
        public CDR()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Ruft den "AccountCode"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string AccountCode
        {
            get
            {
                return this._accountCode;
            }
            set
            {
                if ((this._accountCode != value))
                {
                    this.OnAccountCodeChanging(value);
                    this.RaiseDataMemberChanging("AccountCode");
                    this.ValidateProperty("AccountCode", value);
                    this._accountCode = value;
                    this.RaiseDataMemberChanged("AccountCode");
                    this.OnAccountCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "AdminMemberID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string AdminMemberID
        {
            get
            {
                return this._adminMemberID;
            }
            set
            {
                if ((this._adminMemberID != value))
                {
                    this.OnAdminMemberIDChanging(value);
                    this.RaiseDataMemberChanging("AdminMemberID");
                    this.ValidateProperty("AdminMemberID", value);
                    this._adminMemberID = value;
                    this.RaiseDataMemberChanged("AdminMemberID");
                    this.OnAdminMemberIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "AnsweredAt"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> AnsweredAt
        {
            get
            {
                return this._answeredAt;
            }
            set
            {
                if ((this._answeredAt != value))
                {
                    this.OnAnsweredAtChanging(value);
                    this.RaiseDataMemberChanging("AnsweredAt");
                    this.ValidateProperty("AnsweredAt", value);
                    this._answeredAt = value;
                    this.RaiseDataMemberChanged("AnsweredAt");
                    this.OnAnsweredAtChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "AnsweredReason"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string AnsweredReason
        {
            get
            {
                return this._answeredReason;
            }
            set
            {
                if ((this._answeredReason != value))
                {
                    this.OnAnsweredReasonChanging(value);
                    this.RaiseDataMemberChanging("AnsweredReason");
                    this.ValidateProperty("AnsweredReason", value);
                    this._answeredReason = value;
                    this.RaiseDataMemberChanged("AnsweredReason");
                    this.OnAnsweredReasonChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "AnsweredStatus"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public Nullable<int> AnsweredStatus
        {
            get
            {
                return this._answeredStatus;
            }
            set
            {
                if ((this._answeredStatus != value))
                {
                    this.OnAnsweredStatusChanging(value);
                    this.RaiseDataMemberChanging("AnsweredStatus");
                    this.ValidateProperty("AnsweredStatus", value);
                    this._answeredStatus = value;
                    this.RaiseDataMemberChanged("AnsweredStatus");
                    this.OnAnsweredStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "AnsweredTime"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string AnsweredTime
        {
            get
            {
                return this._answeredTime;
            }
            set
            {
                if ((this._answeredTime != value))
                {
                    this.OnAnsweredTimeChanging(value);
                    this.RaiseDataMemberChanging("AnsweredTime");
                    this.ValidateProperty("AnsweredTime", value);
                    this._answeredTime = value;
                    this.RaiseDataMemberChanged("AnsweredTime");
                    this.OnAnsweredTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "BridgeID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string BridgeID
        {
            get
            {
                return this._bridgeID;
            }
            set
            {
                if ((this._bridgeID != value))
                {
                    this.OnBridgeIDChanging(value);
                    this.RaiseDataMemberChanging("BridgeID");
                    this.ValidateProperty("BridgeID", value);
                    this._bridgeID = value;
                    this.RaiseDataMemberChanged("BridgeID");
                    this.OnBridgeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "CallID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string CallID
        {
            get
            {
                return this._callID;
            }
            set
            {
                if ((this._callID != value))
                {
                    this.OnCallIDChanging(value);
                    this.RaiseDataMemberChanging("CallID");
                    this.ValidateProperty("CallID", value);
                    this._callID = value;
                    this.RaiseDataMemberChanged("CallID");
                    this.OnCallIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Cost"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Cost
        {
            get
            {
                return this._cost;
            }
            set
            {
                if ((this._cost != value))
                {
                    this.OnCostChanging(value);
                    this.RaiseDataMemberChanging("Cost");
                    this.ValidateProperty("Cost", value);
                    this._cost = value;
                    this.RaiseDataMemberChanged("Cost");
                    this.OnCostChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Created"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Created
        {
            get
            {
                return this._created;
            }
            set
            {
                if ((this._created != value))
                {
                    this.OnCreatedChanging(value);
                    this.RaiseDataMemberChanging("Created");
                    this.ValidateProperty("Created", value);
                    this._created = value;
                    this.RaiseDataMemberChanged("Created");
                    this.OnCreatedChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Direction"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Direction
        {
            get
            {
                return this._direction;
            }
            set
            {
                if ((this._direction != value))
                {
                    this.OnDirectionChanging(value);
                    this.RaiseDataMemberChanging("Direction");
                    this.ValidateProperty("Direction", value);
                    this._direction = value;
                    this.RaiseDataMemberChanged("Direction");
                    this.OnDirectionChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Dst"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string Dst
        {
            get
            {
                return this._dst;
            }
            set
            {
                if ((this._dst != value))
                {
                    this.OnDstChanging(value);
                    this.RaiseDataMemberChanging("Dst");
                    this.ValidateProperty("Dst", value);
                    this._dst = value;
                    this.RaiseDataMemberChanged("Dst");
                    this.OnDstChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "DstHost"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string DstHost
        {
            get
            {
                return this._dstHost;
            }
            set
            {
                if ((this._dstHost != value))
                {
                    this.OnDstHostChanging(value);
                    this.RaiseDataMemberChanging("DstHost");
                    this.ValidateProperty("DstHost", value);
                    this._dstHost = value;
                    this.RaiseDataMemberChanged("DstHost");
                    this.OnDstHostChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "DstURI"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string DstURI
        {
            get
            {
                return this._dstURI;
            }
            set
            {
                if ((this._dstURI != value))
                {
                    this.OnDstURIChanging(value);
                    this.RaiseDataMemberChanging("DstURI");
                    this.ValidateProperty("DstURI", value);
                    this._dstURI = value;
                    this.RaiseDataMemberChanged("DstURI");
                    this.OnDstURIChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Duration"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public Nullable<int> Duration
        {
            get
            {
                return this._duration;
            }
            set
            {
                if ((this._duration != value))
                {
                    this.OnDurationChanging(value);
                    this.RaiseDataMemberChanging("Duration");
                    this.ValidateProperty("Duration", value);
                    this._duration = value;
                    this.RaiseDataMemberChanged("Duration");
                    this.OnDurationChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "FromHeader"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string FromHeader
        {
            get
            {
                return this._fromHeader;
            }
            set
            {
                if ((this._fromHeader != value))
                {
                    this.OnFromHeaderChanging(value);
                    this.RaiseDataMemberChanging("FromHeader");
                    this.ValidateProperty("FromHeader", value);
                    this._fromHeader = value;
                    this.RaiseDataMemberChanged("FromHeader");
                    this.OnFromHeaderChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "FromName"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string FromName
        {
            get
            {
                return this._fromName;
            }
            set
            {
                if ((this._fromName != value))
                {
                    this.OnFromNameChanging(value);
                    this.RaiseDataMemberChanging("FromName");
                    this.ValidateProperty("FromName", value);
                    this._fromName = value;
                    this.RaiseDataMemberChanged("FromName");
                    this.OnFromNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "FromUser"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string FromUser
        {
            get
            {
                return this._fromUser;
            }
            set
            {
                if ((this._fromUser != value))
                {
                    this.OnFromUserChanging(value);
                    this.RaiseDataMemberChanging("FromUser");
                    this.ValidateProperty("FromUser", value);
                    this._fromUser = value;
                    this.RaiseDataMemberChanged("FromUser");
                    this.OnFromUserChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "HungupReason"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string HungupReason
        {
            get
            {
                return this._hungupReason;
            }
            set
            {
                if ((this._hungupReason != value))
                {
                    this.OnHungupReasonChanging(value);
                    this.RaiseDataMemberChanging("HungupReason");
                    this.ValidateProperty("HungupReason", value);
                    this._hungupReason = value;
                    this.RaiseDataMemberChanged("HungupReason");
                    this.OnHungupReasonChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "HungupTime"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string HungupTime
        {
            get
            {
                return this._hungupTime;
            }
            set
            {
                if ((this._hungupTime != value))
                {
                    this.OnHungupTimeChanging(value);
                    this.RaiseDataMemberChanging("HungupTime");
                    this.ValidateProperty("HungupTime", value);
                    this._hungupTime = value;
                    this.RaiseDataMemberChanged("HungupTime");
                    this.OnHungupTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public string ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "InProgressReason"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string InProgressReason
        {
            get
            {
                return this._inProgressReason;
            }
            set
            {
                if ((this._inProgressReason != value))
                {
                    this.OnInProgressReasonChanging(value);
                    this.RaiseDataMemberChanging("InProgressReason");
                    this.ValidateProperty("InProgressReason", value);
                    this._inProgressReason = value;
                    this.RaiseDataMemberChanged("InProgressReason");
                    this.OnInProgressReasonChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "InProgressStatus"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public Nullable<int> InProgressStatus
        {
            get
            {
                return this._inProgressStatus;
            }
            set
            {
                if ((this._inProgressStatus != value))
                {
                    this.OnInProgressStatusChanging(value);
                    this.RaiseDataMemberChanging("InProgressStatus");
                    this.ValidateProperty("InProgressStatus", value);
                    this._inProgressStatus = value;
                    this.RaiseDataMemberChanged("InProgressStatus");
                    this.OnInProgressStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "InProgressTime"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string InProgressTime
        {
            get
            {
                return this._inProgressTime;
            }
            set
            {
                if ((this._inProgressTime != value))
                {
                    this.OnInProgressTimeChanging(value);
                    this.RaiseDataMemberChanging("InProgressTime");
                    this.ValidateProperty("InProgressTime", value);
                    this._inProgressTime = value;
                    this.RaiseDataMemberChanged("InProgressTime");
                    this.OnInProgressTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Inserted"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Inserted
        {
            get
            {
                return this._inserted;
            }
            set
            {
                if ((this._inserted != value))
                {
                    this.OnInsertedChanging(value);
                    this.RaiseDataMemberChanging("Inserted");
                    this.ValidateProperty("Inserted", value);
                    this._inserted = value;
                    this.RaiseDataMemberChanged("Inserted");
                    this.OnInsertedChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "IsHangingUp"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public bool IsHangingUp
        {
            get
            {
                return this._isHangingUp;
            }
            set
            {
                if ((this._isHangingUp != value))
                {
                    this.OnIsHangingUpChanging(value);
                    this.RaiseDataMemberChanging("IsHangingUp");
                    this.ValidateProperty("IsHangingUp", value);
                    this._isHangingUp = value;
                    this.RaiseDataMemberChanged("IsHangingUp");
                    this.OnIsHangingUpChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "LocalSocket"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string LocalSocket
        {
            get
            {
                return this._localSocket;
            }
            set
            {
                if ((this._localSocket != value))
                {
                    this.OnLocalSocketChanging(value);
                    this.RaiseDataMemberChanging("LocalSocket");
                    this.ValidateProperty("LocalSocket", value);
                    this._localSocket = value;
                    this.RaiseDataMemberChanged("LocalSocket");
                    this.OnLocalSocketChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Owner"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string Owner
        {
            get
            {
                return this._owner;
            }
            set
            {
                if ((this._owner != value))
                {
                    this.OnOwnerChanging(value);
                    this.RaiseDataMemberChanging("Owner");
                    this.ValidateProperty("Owner", value);
                    this._owner = value;
                    this.RaiseDataMemberChanged("Owner");
                    this.OnOwnerChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "PostReconciliationBalance"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> PostReconciliationBalance
        {
            get
            {
                return this._postReconciliationBalance;
            }
            set
            {
                if ((this._postReconciliationBalance != value))
                {
                    this.OnPostReconciliationBalanceChanging(value);
                    this.RaiseDataMemberChanging("PostReconciliationBalance");
                    this.ValidateProperty("PostReconciliationBalance", value);
                    this._postReconciliationBalance = value;
                    this.RaiseDataMemberChanged("PostReconciliationBalance");
                    this.OnPostReconciliationBalanceChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Rate"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Rate
        {
            get
            {
                return this._rate;
            }
            set
            {
                if ((this._rate != value))
                {
                    this.OnRateChanging(value);
                    this.RaiseDataMemberChanging("Rate");
                    this.ValidateProperty("Rate", value);
                    this._rate = value;
                    this.RaiseDataMemberChanged("Rate");
                    this.OnRateChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ReconciliationResult"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string ReconciliationResult
        {
            get
            {
                return this._reconciliationResult;
            }
            set
            {
                if ((this._reconciliationResult != value))
                {
                    this.OnReconciliationResultChanging(value);
                    this.RaiseDataMemberChanging("ReconciliationResult");
                    this.ValidateProperty("ReconciliationResult", value);
                    this._reconciliationResult = value;
                    this.RaiseDataMemberChanged("ReconciliationResult");
                    this.OnReconciliationResultChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "RemoteSocket"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string RemoteSocket
        {
            get
            {
                return this._remoteSocket;
            }
            set
            {
                if ((this._remoteSocket != value))
                {
                    this.OnRemoteSocketChanging(value);
                    this.RaiseDataMemberChanging("RemoteSocket");
                    this.ValidateProperty("RemoteSocket", value);
                    this._remoteSocket = value;
                    this.RaiseDataMemberChanged("RemoteSocket");
                    this.OnRemoteSocketChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ReservationError"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string ReservationError
        {
            get
            {
                return this._reservationError;
            }
            set
            {
                if ((this._reservationError != value))
                {
                    this.OnReservationErrorChanging(value);
                    this.RaiseDataMemberChanging("ReservationError");
                    this.ValidateProperty("ReservationError", value);
                    this._reservationError = value;
                    this.RaiseDataMemberChanged("ReservationError");
                    this.OnReservationErrorChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "RingDuration"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public Nullable<int> RingDuration
        {
            get
            {
                return this._ringDuration;
            }
            set
            {
                if ((this._ringDuration != value))
                {
                    this.OnRingDurationChanging(value);
                    this.RaiseDataMemberChanging("RingDuration");
                    this.ValidateProperty("RingDuration", value);
                    this._ringDuration = value;
                    this.RaiseDataMemberChanged("RingDuration");
                    this.OnRingDurationChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "SecondsReserved"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public Nullable<int> SecondsReserved
        {
            get
            {
                return this._secondsReserved;
            }
            set
            {
                if ((this._secondsReserved != value))
                {
                    this.OnSecondsReservedChanging(value);
                    this.RaiseDataMemberChanging("SecondsReserved");
                    this.ValidateProperty("SecondsReserved", value);
                    this._secondsReserved = value;
                    this.RaiseDataMemberChanged("SecondsReserved");
                    this.OnSecondsReservedChanged();
                }
            }
        }
        
        /// <summary>
        /// Berechnet einen Wert aus den Schlüsselfeldern, der diese Entitätsinstanz eindeutig identifiziert.
        /// </summary>
        /// <returns>Eine Objektinstanz, die diese Entitätsinstanz eindeutig identifiziert.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// Die "Customer"-Entitätsklasse.
    /// </summary>
    [CustomValidation(typeof(CustomerValidator), "IsValid")]
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SIPSorcery.Entities")]
    public sealed partial class Customer : Entity
    {
        
        private bool _active;
        
        private string _adminID;
        
        private string _adminMemberID;
        
        private string _apiKey;
        
        private string _authorisedApps;
        
        private string _city;
        
        private string _country;
        
        private string _createdFromIPAddress;
        
        private string _customerPassword;
        
        private string _emailAddress;
        
        private bool _emailAddressConfirmed;
        
        private int _executionCount;
        
        private string _firstname;
        
        private string _id;
        
        private string _inserted;
        
        private string _inviteCode;
        
        private string _lastname;
        
        private int _maxExecutionCount;
        
        private string _name;
        
        private string _passwordResetID;
        
        private string _passwordResetIDSetAt;
        
        private int _rtccBillingIncrement;
        
        private string _rtccInternationalPrefixes;
        
        private string _salt;
        
        private string _securityAnswer;
        
        private string _securityQuestion;
        
        private string _serviceLevel;
        
        private string _serviceRenewalDate;
        
        private bool _suspended;
        
        private string _suspendedReason;
        
        private string _timezone;
        
        private Nullable<int> _usernamerecoveryfailurecount;
        
        private string _usernamerecoveryid;
        
        private string _usernamerecoveryidsetat;
        
        private string _usernamerecoverylastattemptat;
        
        private string _webSite;
        
        #region Definitionen der Extensibility-Methode

        /// <summary>
        /// Diese Methode wird nach Abschluss der Initialisierung vom Konstruktor aufgerufen
        /// und kann für das weitere Objektsetup verwendet werden.
        /// </summary>
        partial void OnCreated();
        partial void OnActiveChanging(bool value);
        partial void OnActiveChanged();
        partial void OnAdminIDChanging(string value);
        partial void OnAdminIDChanged();
        partial void OnAdminMemberIDChanging(string value);
        partial void OnAdminMemberIDChanged();
        partial void OnAPIKeyChanging(string value);
        partial void OnAPIKeyChanged();
        partial void OnAuthorisedAppsChanging(string value);
        partial void OnAuthorisedAppsChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnCreatedFromIPAddressChanging(string value);
        partial void OnCreatedFromIPAddressChanged();
        partial void OnCustomerPasswordChanging(string value);
        partial void OnCustomerPasswordChanged();
        partial void OnEmailAddressChanging(string value);
        partial void OnEmailAddressChanged();
        partial void OnEmailAddressConfirmedChanging(bool value);
        partial void OnEmailAddressConfirmedChanged();
        partial void OnExecutionCountChanging(int value);
        partial void OnExecutionCountChanged();
        partial void OnFirstnameChanging(string value);
        partial void OnFirstnameChanged();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnInsertedChanging(string value);
        partial void OnInsertedChanged();
        partial void OnInviteCodeChanging(string value);
        partial void OnInviteCodeChanged();
        partial void OnLastnameChanging(string value);
        partial void OnLastnameChanged();
        partial void OnMaxExecutionCountChanging(int value);
        partial void OnMaxExecutionCountChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPasswordResetIDChanging(string value);
        partial void OnPasswordResetIDChanged();
        partial void OnPasswordResetIDSetAtChanging(string value);
        partial void OnPasswordResetIDSetAtChanged();
        partial void OnRTCCBillingIncrementChanging(int value);
        partial void OnRTCCBillingIncrementChanged();
        partial void OnRTCCInternationalPrefixesChanging(string value);
        partial void OnRTCCInternationalPrefixesChanged();
        partial void OnSaltChanging(string value);
        partial void OnSaltChanged();
        partial void OnSecurityAnswerChanging(string value);
        partial void OnSecurityAnswerChanged();
        partial void OnSecurityQuestionChanging(string value);
        partial void OnSecurityQuestionChanged();
        partial void OnServiceLevelChanging(string value);
        partial void OnServiceLevelChanged();
        partial void OnServiceRenewalDateChanging(string value);
        partial void OnServiceRenewalDateChanged();
        partial void OnSuspendedChanging(bool value);
        partial void OnSuspendedChanged();
        partial void OnSuspendedReasonChanging(string value);
        partial void OnSuspendedReasonChanged();
        partial void OnTimezoneChanging(string value);
        partial void OnTimezoneChanged();
        partial void OnusernamerecoveryfailurecountChanging(Nullable<int> value);
        partial void OnusernamerecoveryfailurecountChanged();
        partial void OnusernamerecoveryidChanging(string value);
        partial void OnusernamerecoveryidChanged();
        partial void OnusernamerecoveryidsetatChanging(string value);
        partial void OnusernamerecoveryidsetatChanged();
        partial void OnusernamerecoverylastattemptatChanging(string value);
        partial void OnusernamerecoverylastattemptatChanged();
        partial void OnWebSiteChanging(string value);
        partial void OnWebSiteChanged();

        #endregion
        
        
        /// <summary>
        /// Initialisiert eine neue Instanz der <see cref="Customer"/>-Klasse.
        /// </summary>
        public Customer()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Ruft den "Active"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                if ((this._active != value))
                {
                    this.OnActiveChanging(value);
                    this.ValidateProperty("Active", value);
                    this._active = value;
                    this.RaisePropertyChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "AdminID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public string AdminID
        {
            get
            {
                return this._adminID;
            }
            set
            {
                if ((this._adminID != value))
                {
                    this.OnAdminIDChanging(value);
                    this.ValidateProperty("AdminID", value);
                    this._adminID = value;
                    this.RaisePropertyChanged("AdminID");
                    this.OnAdminIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "AdminMemberID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public string AdminMemberID
        {
            get
            {
                return this._adminMemberID;
            }
            set
            {
                if ((this._adminMemberID != value))
                {
                    this.OnAdminMemberIDChanging(value);
                    this.ValidateProperty("AdminMemberID", value);
                    this._adminMemberID = value;
                    this.RaisePropertyChanged("AdminMemberID");
                    this.OnAdminMemberIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "APIKey"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string APIKey
        {
            get
            {
                return this._apiKey;
            }
            set
            {
                if ((this._apiKey != value))
                {
                    this.OnAPIKeyChanging(value);
                    this.RaiseDataMemberChanging("APIKey");
                    this.ValidateProperty("APIKey", value);
                    this._apiKey = value;
                    this.RaiseDataMemberChanged("APIKey");
                    this.OnAPIKeyChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "AuthorisedApps"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public string AuthorisedApps
        {
            get
            {
                return this._authorisedApps;
            }
            set
            {
                if ((this._authorisedApps != value))
                {
                    this.OnAuthorisedAppsChanging(value);
                    this.ValidateProperty("AuthorisedApps", value);
                    this._authorisedApps = value;
                    this.RaisePropertyChanged("AuthorisedApps");
                    this.OnAuthorisedAppsChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "City"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required(ErrorMessage="Please enter the city you live in or that is closest to where you live.")]
        [StringLength(64, ErrorMessage="The email address is too long. The maximum length allowed is 64 characters.")]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Country"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required(ErrorMessage="Please select the country you live in from the list.")]
        public string Country
        {
            get
            {
                return this._country;
            }
            set
            {
                if ((this._country != value))
                {
                    this.OnCountryChanging(value);
                    this.RaiseDataMemberChanging("Country");
                    this.ValidateProperty("Country", value);
                    this._country = value;
                    this.RaiseDataMemberChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "CreatedFromIPAddress"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public string CreatedFromIPAddress
        {
            get
            {
                return this._createdFromIPAddress;
            }
            set
            {
                if ((this._createdFromIPAddress != value))
                {
                    this.OnCreatedFromIPAddressChanging(value);
                    this.ValidateProperty("CreatedFromIPAddress", value);
                    this._createdFromIPAddress = value;
                    this.RaisePropertyChanged("CreatedFromIPAddress");
                    this.OnCreatedFromIPAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "CustomerPassword"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required(ErrorMessage="A password must be specified.")]
        [StringLength(32, ErrorMessage="The password is an invalid length. The minimum length required is 6 characters an" +
            "d the maximum length allowed is 32 characters.", MinimumLength=6)]
        public string CustomerPassword
        {
            get
            {
                return this._customerPassword;
            }
            set
            {
                if ((this._customerPassword != value))
                {
                    this.OnCustomerPasswordChanging(value);
                    this.RaiseDataMemberChanging("CustomerPassword");
                    this.ValidateProperty("CustomerPassword", value);
                    this._customerPassword = value;
                    this.RaiseDataMemberChanged("CustomerPassword");
                    this.OnCustomerPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "EmailAddress"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [RegularExpression("^([\\w\\!\\#$\\%\\&\\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+\\.)*[\\w\\!\\#$\\%\\&\\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\" +
            "~]+@((((([a-zA-Z0-9]{1}[a-zA-Z0-9\\-]{0,62}[a-zA-Z0-9]{1})|[a-zA-Z])\\.)+[a-zA-Z]{" +
            "2,6})|(\\d{1,3}\\.){3}\\d{1,3}(\\:\\d{1,5})?)$", ErrorMessage="The value was not recognised as a valid email address.")]
        [Required(ErrorMessage="Please enter your email address. A confirmation email will be sent to this addres" +
            "s before your account is activated.")]
        [StringLength(255, ErrorMessage="The email address is too long. The maximum length allowed is 255 characters.")]
        public string EmailAddress
        {
            get
            {
                return this._emailAddress;
            }
            set
            {
                if ((this._emailAddress != value))
                {
                    this.OnEmailAddressChanging(value);
                    this.RaiseDataMemberChanging("EmailAddress");
                    this.ValidateProperty("EmailAddress", value);
                    this._emailAddress = value;
                    this.RaiseDataMemberChanged("EmailAddress");
                    this.OnEmailAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "EmailAddressConfirmed"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public bool EmailAddressConfirmed
        {
            get
            {
                return this._emailAddressConfirmed;
            }
            set
            {
                if ((this._emailAddressConfirmed != value))
                {
                    this.OnEmailAddressConfirmedChanging(value);
                    this.ValidateProperty("EmailAddressConfirmed", value);
                    this._emailAddressConfirmed = value;
                    this.RaisePropertyChanged("EmailAddressConfirmed");
                    this.OnEmailAddressConfirmedChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ExecutionCount"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public int ExecutionCount
        {
            get
            {
                return this._executionCount;
            }
            set
            {
                if ((this._executionCount != value))
                {
                    this.OnExecutionCountChanging(value);
                    this.ValidateProperty("ExecutionCount", value);
                    this._executionCount = value;
                    this.RaisePropertyChanged("ExecutionCount");
                    this.OnExecutionCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Firstname"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required(ErrorMessage="Please enter your first name.")]
        [StringLength(64, ErrorMessage="The first name is too long. The maximum length allowed is 64 characters.")]
        public string Firstname
        {
            get
            {
                return this._firstname;
            }
            set
            {
                if ((this._firstname != value))
                {
                    this.OnFirstnameChanging(value);
                    this.RaiseDataMemberChanging("Firstname");
                    this.ValidateProperty("Firstname", value);
                    this._firstname = value;
                    this.RaiseDataMemberChanged("Firstname");
                    this.OnFirstnameChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public string ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Inserted"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Required()]
        public string Inserted
        {
            get
            {
                return this._inserted;
            }
            set
            {
                if ((this._inserted != value))
                {
                    this.OnInsertedChanging(value);
                    this.ValidateProperty("Inserted", value);
                    this._inserted = value;
                    this.RaisePropertyChanged("Inserted");
                    this.OnInsertedChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "InviteCode"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [StringLength(36, ErrorMessage="The invite code is the wrong length is must be 36 characters long.")]
        public string InviteCode
        {
            get
            {
                return this._inviteCode;
            }
            set
            {
                if ((this._inviteCode != value))
                {
                    this.OnInviteCodeChanging(value);
                    this.RaiseDataMemberChanging("InviteCode");
                    this.ValidateProperty("InviteCode", value);
                    this._inviteCode = value;
                    this.RaiseDataMemberChanged("InviteCode");
                    this.OnInviteCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Lastname"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required(ErrorMessage="Please enter your last name.")]
        [StringLength(64, ErrorMessage="The last name is too long. The maximum length allowed is 64 characters.")]
        public string Lastname
        {
            get
            {
                return this._lastname;
            }
            set
            {
                if ((this._lastname != value))
                {
                    this.OnLastnameChanging(value);
                    this.RaiseDataMemberChanging("Lastname");
                    this.ValidateProperty("Lastname", value);
                    this._lastname = value;
                    this.RaiseDataMemberChanged("Lastname");
                    this.OnLastnameChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "MaxExecutionCount"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public int MaxExecutionCount
        {
            get
            {
                return this._maxExecutionCount;
            }
            set
            {
                if ((this._maxExecutionCount != value))
                {
                    this.OnMaxExecutionCountChanging(value);
                    this.ValidateProperty("MaxExecutionCount", value);
                    this._maxExecutionCount = value;
                    this.RaisePropertyChanged("MaxExecutionCount");
                    this.OnMaxExecutionCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Name"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [RegularExpression("[a-zA-Z0-9_\\-]*", ErrorMessage="The username contained an illegal character. Only characters a-zA-Z0-9_- are perm" +
            "itted.")]
        [Required(ErrorMessage="Please choose a username.")]
        [StringLength(32, ErrorMessage="The username is an invalid length. The minimum length required is 5 characters an" +
            "d the maximum length allowed is 32 characters.", MinimumLength=5)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "PasswordResetID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public string PasswordResetID
        {
            get
            {
                return this._passwordResetID;
            }
            set
            {
                if ((this._passwordResetID != value))
                {
                    this.OnPasswordResetIDChanging(value);
                    this.ValidateProperty("PasswordResetID", value);
                    this._passwordResetID = value;
                    this.RaisePropertyChanged("PasswordResetID");
                    this.OnPasswordResetIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "PasswordResetIDSetAt"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public string PasswordResetIDSetAt
        {
            get
            {
                return this._passwordResetIDSetAt;
            }
            set
            {
                if ((this._passwordResetIDSetAt != value))
                {
                    this.OnPasswordResetIDSetAtChanging(value);
                    this.ValidateProperty("PasswordResetIDSetAt", value);
                    this._passwordResetIDSetAt = value;
                    this.RaisePropertyChanged("PasswordResetIDSetAt");
                    this.OnPasswordResetIDSetAtChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "RTCCBillingIncrement"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public int RTCCBillingIncrement
        {
            get
            {
                return this._rtccBillingIncrement;
            }
            set
            {
                if ((this._rtccBillingIncrement != value))
                {
                    this.OnRTCCBillingIncrementChanging(value);
                    this.RaiseDataMemberChanging("RTCCBillingIncrement");
                    this.ValidateProperty("RTCCBillingIncrement", value);
                    this._rtccBillingIncrement = value;
                    this.RaiseDataMemberChanged("RTCCBillingIncrement");
                    this.OnRTCCBillingIncrementChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "RTCCInternationalPrefixes"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string RTCCInternationalPrefixes
        {
            get
            {
                return this._rtccInternationalPrefixes;
            }
            set
            {
                if ((this._rtccInternationalPrefixes != value))
                {
                    this.OnRTCCInternationalPrefixesChanging(value);
                    this.RaiseDataMemberChanging("RTCCInternationalPrefixes");
                    this.ValidateProperty("RTCCInternationalPrefixes", value);
                    this._rtccInternationalPrefixes = value;
                    this.RaiseDataMemberChanged("RTCCInternationalPrefixes");
                    this.OnRTCCInternationalPrefixesChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Salt"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Salt
        {
            get
            {
                return this._salt;
            }
            set
            {
                if ((this._salt != value))
                {
                    this.OnSaltChanging(value);
                    this.RaiseDataMemberChanging("Salt");
                    this.ValidateProperty("Salt", value);
                    this._salt = value;
                    this.RaiseDataMemberChanged("Salt");
                    this.OnSaltChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "SecurityAnswer"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required(ErrorMessage="Please enter an answer to the security question.")]
        [StringLength(256, ErrorMessage="The security answer is too long. The maximum length allowed is 256 characters.")]
        public string SecurityAnswer
        {
            get
            {
                return this._securityAnswer;
            }
            set
            {
                if ((this._securityAnswer != value))
                {
                    this.OnSecurityAnswerChanging(value);
                    this.RaiseDataMemberChanging("SecurityAnswer");
                    this.ValidateProperty("SecurityAnswer", value);
                    this._securityAnswer = value;
                    this.RaiseDataMemberChanged("SecurityAnswer");
                    this.OnSecurityAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "SecurityQuestion"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required(ErrorMessage="Please select a security question from the list.")]
        public string SecurityQuestion
        {
            get
            {
                return this._securityQuestion;
            }
            set
            {
                if ((this._securityQuestion != value))
                {
                    this.OnSecurityQuestionChanging(value);
                    this.RaiseDataMemberChanging("SecurityQuestion");
                    this.ValidateProperty("SecurityQuestion", value);
                    this._securityQuestion = value;
                    this.RaiseDataMemberChanged("SecurityQuestion");
                    this.OnSecurityQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ServiceLevel"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string ServiceLevel
        {
            get
            {
                return this._serviceLevel;
            }
            set
            {
                if ((this._serviceLevel != value))
                {
                    this.OnServiceLevelChanging(value);
                    this.RaiseDataMemberChanging("ServiceLevel");
                    this.ValidateProperty("ServiceLevel", value);
                    this._serviceLevel = value;
                    this.RaiseDataMemberChanged("ServiceLevel");
                    this.OnServiceLevelChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ServiceRenewalDate"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string ServiceRenewalDate
        {
            get
            {
                return this._serviceRenewalDate;
            }
            set
            {
                if ((this._serviceRenewalDate != value))
                {
                    this.OnServiceRenewalDateChanging(value);
                    this.RaiseDataMemberChanging("ServiceRenewalDate");
                    this.ValidateProperty("ServiceRenewalDate", value);
                    this._serviceRenewalDate = value;
                    this.RaiseDataMemberChanged("ServiceRenewalDate");
                    this.OnServiceRenewalDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Suspended"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public bool Suspended
        {
            get
            {
                return this._suspended;
            }
            set
            {
                if ((this._suspended != value))
                {
                    this.OnSuspendedChanging(value);
                    this.ValidateProperty("Suspended", value);
                    this._suspended = value;
                    this.RaisePropertyChanged("Suspended");
                    this.OnSuspendedChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "SuspendedReason"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public string SuspendedReason
        {
            get
            {
                return this._suspendedReason;
            }
            set
            {
                if ((this._suspendedReason != value))
                {
                    this.OnSuspendedReasonChanging(value);
                    this.ValidateProperty("SuspendedReason", value);
                    this._suspendedReason = value;
                    this.RaisePropertyChanged("SuspendedReason");
                    this.OnSuspendedReasonChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Timezone"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required(ErrorMessage="Please select your timezone from the list.")]
        public string Timezone
        {
            get
            {
                return this._timezone;
            }
            set
            {
                if ((this._timezone != value))
                {
                    this.OnTimezoneChanging(value);
                    this.RaiseDataMemberChanging("Timezone");
                    this.ValidateProperty("Timezone", value);
                    this._timezone = value;
                    this.RaiseDataMemberChanged("Timezone");
                    this.OnTimezoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "usernamerecoveryfailurecount"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public Nullable<int> usernamerecoveryfailurecount
        {
            get
            {
                return this._usernamerecoveryfailurecount;
            }
            set
            {
                if ((this._usernamerecoveryfailurecount != value))
                {
                    this.OnusernamerecoveryfailurecountChanging(value);
                    this.RaiseDataMemberChanging("usernamerecoveryfailurecount");
                    this.ValidateProperty("usernamerecoveryfailurecount", value);
                    this._usernamerecoveryfailurecount = value;
                    this.RaiseDataMemberChanged("usernamerecoveryfailurecount");
                    this.OnusernamerecoveryfailurecountChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "usernamerecoveryid"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string usernamerecoveryid
        {
            get
            {
                return this._usernamerecoveryid;
            }
            set
            {
                if ((this._usernamerecoveryid != value))
                {
                    this.OnusernamerecoveryidChanging(value);
                    this.RaiseDataMemberChanging("usernamerecoveryid");
                    this.ValidateProperty("usernamerecoveryid", value);
                    this._usernamerecoveryid = value;
                    this.RaiseDataMemberChanged("usernamerecoveryid");
                    this.OnusernamerecoveryidChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "usernamerecoveryidsetat"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string usernamerecoveryidsetat
        {
            get
            {
                return this._usernamerecoveryidsetat;
            }
            set
            {
                if ((this._usernamerecoveryidsetat != value))
                {
                    this.OnusernamerecoveryidsetatChanging(value);
                    this.RaiseDataMemberChanging("usernamerecoveryidsetat");
                    this.ValidateProperty("usernamerecoveryidsetat", value);
                    this._usernamerecoveryidsetat = value;
                    this.RaiseDataMemberChanged("usernamerecoveryidsetat");
                    this.OnusernamerecoveryidsetatChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "usernamerecoverylastattemptat"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string usernamerecoverylastattemptat
        {
            get
            {
                return this._usernamerecoverylastattemptat;
            }
            set
            {
                if ((this._usernamerecoverylastattemptat != value))
                {
                    this.OnusernamerecoverylastattemptatChanging(value);
                    this.RaiseDataMemberChanging("usernamerecoverylastattemptat");
                    this.ValidateProperty("usernamerecoverylastattemptat", value);
                    this._usernamerecoverylastattemptat = value;
                    this.RaiseDataMemberChanged("usernamerecoverylastattemptat");
                    this.OnusernamerecoverylastattemptatChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "WebSite"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [StringLength(256, ErrorMessage="The web site is too long. The maximum length allowed is 256 characters.")]
        public string WebSite
        {
            get
            {
                return this._webSite;
            }
            set
            {
                if ((this._webSite != value))
                {
                    this.OnWebSiteChanging(value);
                    this.RaiseDataMemberChanging("WebSite");
                    this.ValidateProperty("WebSite", value);
                    this._webSite = value;
                    this.RaiseDataMemberChanged("WebSite");
                    this.OnWebSiteChanged();
                }
            }
        }
        
        /// <summary>
        /// Berechnet einen Wert aus den Schlüsselfeldern, der diese Entitätsinstanz eindeutig identifiziert.
        /// </summary>
        /// <returns>Eine Objektinstanz, die diese Entitätsinstanz eindeutig identifiziert.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// Die "SimpleWizardRule"-Entitätsklasse.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SIPSorcery.Entities")]
    public sealed partial class SimpleWizardRule : Entity
    {
        
        private string _command;
        
        private string _commandParameter1;
        
        private string _commandParameter2;
        
        private string _commandParameter3;
        
        private string _commandParameter4;
        
        private string _description;
        
        private string _dialPlanID;
        
        private string _direction;
        
        private string _id;
        
        private bool _isDisabled;
        
        private string _owner;
        
        private string _pattern;
        
        private string _patternType;
        
        private decimal _priority;
        
        private EntityRef<SIPDialPlan> _sipdialplan;
        
        private string _timePattern;
        
        private string _toMatchParameter;
        
        private string _toMatchType;
        
        private string _toProvider;
        
        private string _toSIPAccount;
        
        #region Definitionen der Extensibility-Methode

        /// <summary>
        /// Diese Methode wird nach Abschluss der Initialisierung vom Konstruktor aufgerufen
        /// und kann für das weitere Objektsetup verwendet werden.
        /// </summary>
        partial void OnCreated();
        partial void OnCommandChanging(string value);
        partial void OnCommandChanged();
        partial void OnCommandParameter1Changing(string value);
        partial void OnCommandParameter1Changed();
        partial void OnCommandParameter2Changing(string value);
        partial void OnCommandParameter2Changed();
        partial void OnCommandParameter3Changing(string value);
        partial void OnCommandParameter3Changed();
        partial void OnCommandParameter4Changing(string value);
        partial void OnCommandParameter4Changed();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnDialPlanIDChanging(string value);
        partial void OnDialPlanIDChanged();
        partial void OnDirectionChanging(string value);
        partial void OnDirectionChanged();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnIsDisabledChanging(bool value);
        partial void OnIsDisabledChanged();
        partial void OnOwnerChanging(string value);
        partial void OnOwnerChanged();
        partial void OnPatternChanging(string value);
        partial void OnPatternChanged();
        partial void OnPatternTypeChanging(string value);
        partial void OnPatternTypeChanged();
        partial void OnPriorityChanging(decimal value);
        partial void OnPriorityChanged();
        partial void OnTimePatternChanging(string value);
        partial void OnTimePatternChanged();
        partial void OnToMatchParameterChanging(string value);
        partial void OnToMatchParameterChanged();
        partial void OnToMatchTypeChanging(string value);
        partial void OnToMatchTypeChanged();
        partial void OnToProviderChanging(string value);
        partial void OnToProviderChanged();
        partial void OnToSIPAccountChanging(string value);
        partial void OnToSIPAccountChanged();

        #endregion
        
        
        /// <summary>
        /// Initialisiert eine neue Instanz der <see cref="SimpleWizardRule"/>-Klasse.
        /// </summary>
        public SimpleWizardRule()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Ruft den "Command"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Command
        {
            get
            {
                return this._command;
            }
            set
            {
                if ((this._command != value))
                {
                    this.OnCommandChanging(value);
                    this.RaiseDataMemberChanging("Command");
                    this.ValidateProperty("Command", value);
                    this._command = value;
                    this.RaiseDataMemberChanged("Command");
                    this.OnCommandChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "CommandParameter1"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string CommandParameter1
        {
            get
            {
                return this._commandParameter1;
            }
            set
            {
                if ((this._commandParameter1 != value))
                {
                    this.OnCommandParameter1Changing(value);
                    this.RaiseDataMemberChanging("CommandParameter1");
                    this.ValidateProperty("CommandParameter1", value);
                    this._commandParameter1 = value;
                    this.RaiseDataMemberChanged("CommandParameter1");
                    this.OnCommandParameter1Changed();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "CommandParameter2"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string CommandParameter2
        {
            get
            {
                return this._commandParameter2;
            }
            set
            {
                if ((this._commandParameter2 != value))
                {
                    this.OnCommandParameter2Changing(value);
                    this.RaiseDataMemberChanging("CommandParameter2");
                    this.ValidateProperty("CommandParameter2", value);
                    this._commandParameter2 = value;
                    this.RaiseDataMemberChanged("CommandParameter2");
                    this.OnCommandParameter2Changed();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "CommandParameter3"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string CommandParameter3
        {
            get
            {
                return this._commandParameter3;
            }
            set
            {
                if ((this._commandParameter3 != value))
                {
                    this.OnCommandParameter3Changing(value);
                    this.RaiseDataMemberChanging("CommandParameter3");
                    this.ValidateProperty("CommandParameter3", value);
                    this._commandParameter3 = value;
                    this.RaiseDataMemberChanged("CommandParameter3");
                    this.OnCommandParameter3Changed();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "CommandParameter4"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string CommandParameter4
        {
            get
            {
                return this._commandParameter4;
            }
            set
            {
                if ((this._commandParameter4 != value))
                {
                    this.OnCommandParameter4Changing(value);
                    this.RaiseDataMemberChanging("CommandParameter4");
                    this.ValidateProperty("CommandParameter4", value);
                    this._commandParameter4 = value;
                    this.RaiseDataMemberChanged("CommandParameter4");
                    this.OnCommandParameter4Changed();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Description"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "DialPlanID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        public string DialPlanID
        {
            get
            {
                return this._dialPlanID;
            }
            set
            {
                if ((this._dialPlanID != value))
                {
                    this.OnDialPlanIDChanging(value);
                    this.RaiseDataMemberChanging("DialPlanID");
                    this.ValidateProperty("DialPlanID", value);
                    this._dialPlanID = value;
                    this.RaiseDataMemberChanged("DialPlanID");
                    this.OnDialPlanIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Direction"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Direction
        {
            get
            {
                return this._direction;
            }
            set
            {
                if ((this._direction != value))
                {
                    this.OnDirectionChanging(value);
                    this.RaiseDataMemberChanging("Direction");
                    this.ValidateProperty("Direction", value);
                    this._direction = value;
                    this.RaiseDataMemberChanged("Direction");
                    this.OnDirectionChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public string ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "IsDisabled"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public bool IsDisabled
        {
            get
            {
                return this._isDisabled;
            }
            set
            {
                if ((this._isDisabled != value))
                {
                    this.OnIsDisabledChanging(value);
                    this.RaiseDataMemberChanging("IsDisabled");
                    this.ValidateProperty("IsDisabled", value);
                    this._isDisabled = value;
                    this.RaiseDataMemberChanged("IsDisabled");
                    this.OnIsDisabledChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Owner"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required(ErrorMessage="An owner must be specified for a dial plan rule.")]
        public string Owner
        {
            get
            {
                return this._owner;
            }
            set
            {
                if ((this._owner != value))
                {
                    this.OnOwnerChanging(value);
                    this.RaiseDataMemberChanging("Owner");
                    this.ValidateProperty("Owner", value);
                    this._owner = value;
                    this.RaiseDataMemberChanged("Owner");
                    this.OnOwnerChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Pattern"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string Pattern
        {
            get
            {
                return this._pattern;
            }
            set
            {
                if ((this._pattern != value))
                {
                    this.OnPatternChanging(value);
                    this.RaiseDataMemberChanging("Pattern");
                    this.ValidateProperty("Pattern", value);
                    this._pattern = value;
                    this.RaiseDataMemberChanged("Pattern");
                    this.OnPatternChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "PatternType"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string PatternType
        {
            get
            {
                return this._patternType;
            }
            set
            {
                if ((this._patternType != value))
                {
                    this.OnPatternTypeChanging(value);
                    this.RaiseDataMemberChanging("PatternType");
                    this.ValidateProperty("PatternType", value);
                    this._patternType = value;
                    this.RaiseDataMemberChanged("PatternType");
                    this.OnPatternTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Priority"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public decimal Priority
        {
            get
            {
                return this._priority;
            }
            set
            {
                if ((this._priority != value))
                {
                    this.OnPriorityChanging(value);
                    this.RaiseDataMemberChanging("Priority");
                    this.ValidateProperty("Priority", value);
                    this._priority = value;
                    this.RaiseDataMemberChanged("Priority");
                    this.OnPriorityChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft die zugeordnete <see cref="SIPDialPlan"/>-Entität ab oder legt sie fest.
        /// </summary>
        [Association("SIPDialPlan_SimpleWizardRule", "DialPlanID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public SIPDialPlan sipdialplan
        {
            get
            {
                if ((this._sipdialplan == null))
                {
                    this._sipdialplan = new EntityRef<SIPDialPlan>(this, "sipdialplan", this.Filtersipdialplan);
                }
                return this._sipdialplan.Entity;
            }
            set
            {
                SIPDialPlan previous = this.sipdialplan;
                if ((previous != value))
                {
                    this.ValidateProperty("sipdialplan", value);
                    if ((previous != null))
                    {
                        this._sipdialplan.Entity = null;
                        previous.simplewizardrules.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DialPlanID = value.ID;
                    }
                    else
                    {
                        this.DialPlanID = default(string);
                    }
                    this._sipdialplan.Entity = value;
                    if ((value != null))
                    {
                        value.simplewizardrules.Add(this);
                    }
                    this.RaisePropertyChanged("sipdialplan");
                }
            }
        }
        
        /// <summary>
        /// Ruft den "TimePattern"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string TimePattern
        {
            get
            {
                return this._timePattern;
            }
            set
            {
                if ((this._timePattern != value))
                {
                    this.OnTimePatternChanging(value);
                    this.RaiseDataMemberChanging("TimePattern");
                    this.ValidateProperty("TimePattern", value);
                    this._timePattern = value;
                    this.RaiseDataMemberChanged("TimePattern");
                    this.OnTimePatternChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ToMatchParameter"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string ToMatchParameter
        {
            get
            {
                return this._toMatchParameter;
            }
            set
            {
                if ((this._toMatchParameter != value))
                {
                    this.OnToMatchParameterChanging(value);
                    this.RaiseDataMemberChanging("ToMatchParameter");
                    this.ValidateProperty("ToMatchParameter", value);
                    this._toMatchParameter = value;
                    this.RaiseDataMemberChanged("ToMatchParameter");
                    this.OnToMatchParameterChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ToMatchType"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string ToMatchType
        {
            get
            {
                return this._toMatchType;
            }
            set
            {
                if ((this._toMatchType != value))
                {
                    this.OnToMatchTypeChanging(value);
                    this.RaiseDataMemberChanging("ToMatchType");
                    this.ValidateProperty("ToMatchType", value);
                    this._toMatchType = value;
                    this.RaiseDataMemberChanged("ToMatchType");
                    this.OnToMatchTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ToProvider"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string ToProvider
        {
            get
            {
                return this._toProvider;
            }
            set
            {
                if ((this._toProvider != value))
                {
                    this.OnToProviderChanging(value);
                    this.RaiseDataMemberChanging("ToProvider");
                    this.ValidateProperty("ToProvider", value);
                    this._toProvider = value;
                    this.RaiseDataMemberChanged("ToProvider");
                    this.OnToProviderChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ToSIPAccount"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string ToSIPAccount
        {
            get
            {
                return this._toSIPAccount;
            }
            set
            {
                if ((this._toSIPAccount != value))
                {
                    this.OnToSIPAccountChanging(value);
                    this.RaiseDataMemberChanging("ToSIPAccount");
                    this.ValidateProperty("ToSIPAccount", value);
                    this._toSIPAccount = value;
                    this.RaiseDataMemberChanged("ToSIPAccount");
                    this.OnToSIPAccountChanged();
                }
            }
        }
        
        private bool Filtersipdialplan(SIPDialPlan entity)
        {
            return (entity.ID == this.DialPlanID);
        }
        
        /// <summary>
        /// Berechnet einen Wert aus den Schlüsselfeldern, der diese Entitätsinstanz eindeutig identifiziert.
        /// </summary>
        /// <returns>Eine Objektinstanz, die diese Entitätsinstanz eindeutig identifiziert.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// Die "SIPAccount"-Entitätsklasse.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SIPSorcery.Entities")]
    public sealed partial class SIPAccount : Entity
    {
        
        private string _adminDisabledReason;
        
        private string _adminMemberID;
        
        private string _avatarURL;
        
        private bool _dontMangleEnabled;
        
        private string _id;
        
        private string _inDialPlanName;
        
        private string _inserted;
        
        private string _ipAddressACL;
        
        private bool _isAdminDisabled;
        
        private bool _isIncomingOnly;
        
        private bool _isSwitchboardEnabled;
        
        private bool _isUserDisabled;
        
        private string _networkID;
        
        private string _outDialPlanName;
        
        private string _owner;
        
        private bool _sendNATKeepAlives;
        
        private string _sipDomain;
        
        private string _sipPassword;
        
        private EntityCollection<SIPRegistrarBinding> _sipregistrarbindings;
        
        private string _sipUsername;
        
        #region Definitionen der Extensibility-Methode

        /// <summary>
        /// Diese Methode wird nach Abschluss der Initialisierung vom Konstruktor aufgerufen
        /// und kann für das weitere Objektsetup verwendet werden.
        /// </summary>
        partial void OnCreated();
        partial void OnAdminDisabledReasonChanging(string value);
        partial void OnAdminDisabledReasonChanged();
        partial void OnAdminMemberIDChanging(string value);
        partial void OnAdminMemberIDChanged();
        partial void OnAvatarURLChanging(string value);
        partial void OnAvatarURLChanged();
        partial void OnDontMangleEnabledChanging(bool value);
        partial void OnDontMangleEnabledChanged();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnInDialPlanNameChanging(string value);
        partial void OnInDialPlanNameChanged();
        partial void OnInsertedChanging(string value);
        partial void OnInsertedChanged();
        partial void OnIPAddressACLChanging(string value);
        partial void OnIPAddressACLChanged();
        partial void OnIsAdminDisabledChanging(bool value);
        partial void OnIsAdminDisabledChanged();
        partial void OnIsIncomingOnlyChanging(bool value);
        partial void OnIsIncomingOnlyChanged();
        partial void OnIsSwitchboardEnabledChanging(bool value);
        partial void OnIsSwitchboardEnabledChanged();
        partial void OnIsUserDisabledChanging(bool value);
        partial void OnIsUserDisabledChanged();
        partial void OnNetworkIDChanging(string value);
        partial void OnNetworkIDChanged();
        partial void OnOutDialPlanNameChanging(string value);
        partial void OnOutDialPlanNameChanged();
        partial void OnOwnerChanging(string value);
        partial void OnOwnerChanged();
        partial void OnSendNATKeepAlivesChanging(bool value);
        partial void OnSendNATKeepAlivesChanged();
        partial void OnSIPDomainChanging(string value);
        partial void OnSIPDomainChanged();
        partial void OnSIPPasswordChanging(string value);
        partial void OnSIPPasswordChanged();
        partial void OnSIPUsernameChanging(string value);
        partial void OnSIPUsernameChanged();

        #endregion
        
        
        /// <summary>
        /// Initialisiert eine neue Instanz der <see cref="SIPAccount"/>-Klasse.
        /// </summary>
        public SIPAccount()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Ruft den "AdminDisabledReason"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string AdminDisabledReason
        {
            get
            {
                return this._adminDisabledReason;
            }
            set
            {
                if ((this._adminDisabledReason != value))
                {
                    this.OnAdminDisabledReasonChanging(value);
                    this.RaiseDataMemberChanging("AdminDisabledReason");
                    this.ValidateProperty("AdminDisabledReason", value);
                    this._adminDisabledReason = value;
                    this.RaiseDataMemberChanged("AdminDisabledReason");
                    this.OnAdminDisabledReasonChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "AdminMemberID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string AdminMemberID
        {
            get
            {
                return this._adminMemberID;
            }
            set
            {
                if ((this._adminMemberID != value))
                {
                    this.OnAdminMemberIDChanging(value);
                    this.RaiseDataMemberChanging("AdminMemberID");
                    this.ValidateProperty("AdminMemberID", value);
                    this._adminMemberID = value;
                    this.RaiseDataMemberChanged("AdminMemberID");
                    this.OnAdminMemberIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "AvatarURL"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string AvatarURL
        {
            get
            {
                return this._avatarURL;
            }
            set
            {
                if ((this._avatarURL != value))
                {
                    this.OnAvatarURLChanging(value);
                    this.RaiseDataMemberChanging("AvatarURL");
                    this.ValidateProperty("AvatarURL", value);
                    this._avatarURL = value;
                    this.RaiseDataMemberChanged("AvatarURL");
                    this.OnAvatarURLChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "DontMangleEnabled"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public bool DontMangleEnabled
        {
            get
            {
                return this._dontMangleEnabled;
            }
            set
            {
                if ((this._dontMangleEnabled != value))
                {
                    this.OnDontMangleEnabledChanging(value);
                    this.RaiseDataMemberChanging("DontMangleEnabled");
                    this.ValidateProperty("DontMangleEnabled", value);
                    this._dontMangleEnabled = value;
                    this.RaiseDataMemberChanged("DontMangleEnabled");
                    this.OnDontMangleEnabledChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public string ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "InDialPlanName"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string InDialPlanName
        {
            get
            {
                return this._inDialPlanName;
            }
            set
            {
                if ((this._inDialPlanName != value))
                {
                    this.OnInDialPlanNameChanging(value);
                    this.RaiseDataMemberChanging("InDialPlanName");
                    this.ValidateProperty("InDialPlanName", value);
                    this._inDialPlanName = value;
                    this.RaiseDataMemberChanged("InDialPlanName");
                    this.OnInDialPlanNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Inserted"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Inserted
        {
            get
            {
                return this._inserted;
            }
            set
            {
                if ((this._inserted != value))
                {
                    this.OnInsertedChanging(value);
                    this.RaiseDataMemberChanging("Inserted");
                    this.ValidateProperty("Inserted", value);
                    this._inserted = value;
                    this.RaiseDataMemberChanged("Inserted");
                    this.OnInsertedChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "IPAddressACL"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string IPAddressACL
        {
            get
            {
                return this._ipAddressACL;
            }
            set
            {
                if ((this._ipAddressACL != value))
                {
                    this.OnIPAddressACLChanging(value);
                    this.RaiseDataMemberChanging("IPAddressACL");
                    this.ValidateProperty("IPAddressACL", value);
                    this._ipAddressACL = value;
                    this.RaiseDataMemberChanged("IPAddressACL");
                    this.OnIPAddressACLChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "IsAdminDisabled"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public bool IsAdminDisabled
        {
            get
            {
                return this._isAdminDisabled;
            }
            set
            {
                if ((this._isAdminDisabled != value))
                {
                    this.OnIsAdminDisabledChanging(value);
                    this.RaiseDataMemberChanging("IsAdminDisabled");
                    this.ValidateProperty("IsAdminDisabled", value);
                    this._isAdminDisabled = value;
                    this.RaiseDataMemberChanged("IsAdminDisabled");
                    this.OnIsAdminDisabledChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "IsIncomingOnly"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public bool IsIncomingOnly
        {
            get
            {
                return this._isIncomingOnly;
            }
            set
            {
                if ((this._isIncomingOnly != value))
                {
                    this.OnIsIncomingOnlyChanging(value);
                    this.RaiseDataMemberChanging("IsIncomingOnly");
                    this.ValidateProperty("IsIncomingOnly", value);
                    this._isIncomingOnly = value;
                    this.RaiseDataMemberChanged("IsIncomingOnly");
                    this.OnIsIncomingOnlyChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "IsSwitchboardEnabled"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public bool IsSwitchboardEnabled
        {
            get
            {
                return this._isSwitchboardEnabled;
            }
            set
            {
                if ((this._isSwitchboardEnabled != value))
                {
                    this.OnIsSwitchboardEnabledChanging(value);
                    this.RaiseDataMemberChanging("IsSwitchboardEnabled");
                    this.ValidateProperty("IsSwitchboardEnabled", value);
                    this._isSwitchboardEnabled = value;
                    this.RaiseDataMemberChanged("IsSwitchboardEnabled");
                    this.OnIsSwitchboardEnabledChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "IsUserDisabled"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public bool IsUserDisabled
        {
            get
            {
                return this._isUserDisabled;
            }
            set
            {
                if ((this._isUserDisabled != value))
                {
                    this.OnIsUserDisabledChanging(value);
                    this.RaiseDataMemberChanging("IsUserDisabled");
                    this.ValidateProperty("IsUserDisabled", value);
                    this._isUserDisabled = value;
                    this.RaiseDataMemberChanged("IsUserDisabled");
                    this.OnIsUserDisabledChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "NetworkID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string NetworkID
        {
            get
            {
                return this._networkID;
            }
            set
            {
                if ((this._networkID != value))
                {
                    this.OnNetworkIDChanging(value);
                    this.RaiseDataMemberChanging("NetworkID");
                    this.ValidateProperty("NetworkID", value);
                    this._networkID = value;
                    this.RaiseDataMemberChanged("NetworkID");
                    this.OnNetworkIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "OutDialPlanName"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string OutDialPlanName
        {
            get
            {
                return this._outDialPlanName;
            }
            set
            {
                if ((this._outDialPlanName != value))
                {
                    this.OnOutDialPlanNameChanging(value);
                    this.RaiseDataMemberChanging("OutDialPlanName");
                    this.ValidateProperty("OutDialPlanName", value);
                    this._outDialPlanName = value;
                    this.RaiseDataMemberChanged("OutDialPlanName");
                    this.OnOutDialPlanNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Owner"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required(ErrorMessage="An owner must be specified for the SIP account.")]
        public string Owner
        {
            get
            {
                return this._owner;
            }
            set
            {
                if ((this._owner != value))
                {
                    this.OnOwnerChanging(value);
                    this.RaiseDataMemberChanging("Owner");
                    this.ValidateProperty("Owner", value);
                    this._owner = value;
                    this.RaiseDataMemberChanged("Owner");
                    this.OnOwnerChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "SendNATKeepAlives"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public bool SendNATKeepAlives
        {
            get
            {
                return this._sendNATKeepAlives;
            }
            set
            {
                if ((this._sendNATKeepAlives != value))
                {
                    this.OnSendNATKeepAlivesChanging(value);
                    this.RaiseDataMemberChanging("SendNATKeepAlives");
                    this.ValidateProperty("SendNATKeepAlives", value);
                    this._sendNATKeepAlives = value;
                    this.RaiseDataMemberChanged("SendNATKeepAlives");
                    this.OnSendNATKeepAlivesChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "SIPDomain"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required(ErrorMessage="A domain must be specified for the SIP account.")]
        public string SIPDomain
        {
            get
            {
                return this._sipDomain;
            }
            set
            {
                if ((this._sipDomain != value))
                {
                    this.OnSIPDomainChanging(value);
                    this.RaiseDataMemberChanging("SIPDomain");
                    this.ValidateProperty("SIPDomain", value);
                    this._sipDomain = value;
                    this.RaiseDataMemberChanged("SIPDomain");
                    this.OnSIPDomainChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "SIPPassword"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required(ErrorMessage="A password must be specified for the SIP account.")]
        [StringLength(15, ErrorMessage="The password must be between 6 and 15 characters.", MinimumLength=6)]
        public string SIPPassword
        {
            get
            {
                return this._sipPassword;
            }
            set
            {
                if ((this._sipPassword != value))
                {
                    this.OnSIPPasswordChanging(value);
                    this.RaiseDataMemberChanging("SIPPassword");
                    this.ValidateProperty("SIPPassword", value);
                    this._sipPassword = value;
                    this.RaiseDataMemberChanged("SIPPassword");
                    this.OnSIPPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft die Auflistung der zugeordneten <see cref="SIPRegistrarBinding"/>-Entitätsinstanzen ab.
        /// </summary>
        [Association("SIPAccount_SIPRegistrarBinding", "ID", "SIPAccountID")]
        [XmlIgnore()]
        public EntityCollection<SIPRegistrarBinding> sipregistrarbindings
        {
            get
            {
                if ((this._sipregistrarbindings == null))
                {
                    this._sipregistrarbindings = new EntityCollection<SIPRegistrarBinding>(this, "sipregistrarbindings", this.Filtersipregistrarbindings, this.Attachsipregistrarbindings, this.Detachsipregistrarbindings);
                }
                return this._sipregistrarbindings;
            }
        }
        
        /// <summary>
        /// Ruft den "SIPUsername"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [RegularExpression("[a-zA-Z0-9_\\-\\.]+", ErrorMessage="The username contained an illegal character. Only alpha-numeric characters and .-" +
            "_ are allowed.")]
        [Required(ErrorMessage="A username must be specified for the SIP account.")]
        [StringLength(32, ErrorMessage="The username must be between 5 and 32 characters.", MinimumLength=5)]
        public string SIPUsername
        {
            get
            {
                return this._sipUsername;
            }
            set
            {
                if ((this._sipUsername != value))
                {
                    this.OnSIPUsernameChanging(value);
                    this.RaiseDataMemberChanging("SIPUsername");
                    this.ValidateProperty("SIPUsername", value);
                    this._sipUsername = value;
                    this.RaiseDataMemberChanged("SIPUsername");
                    this.OnSIPUsernameChanged();
                }
            }
        }
        
        private void Attachsipregistrarbindings(SIPRegistrarBinding entity)
        {
            entity.sipaccount = this;
        }
        
        private void Detachsipregistrarbindings(SIPRegistrarBinding entity)
        {
            entity.sipaccount = null;
        }
        
        private bool Filtersipregistrarbindings(SIPRegistrarBinding entity)
        {
            return (entity.SIPAccountID == this.ID);
        }
        
        /// <summary>
        /// Berechnet einen Wert aus den Schlüsselfeldern, der diese Entitätsinstanz eindeutig identifiziert.
        /// </summary>
        /// <returns>Eine Objektinstanz, die diese Entitätsinstanz eindeutig identifiziert.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// Die "SIPDialogue"-Entitätsklasse.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SIPSorcery.Entities")]
    public sealed partial class SIPDialogue : Entity
    {
        
        private string _adminMemberID;
        
        private string _bridgeID;
        
        private Nullable<int> _callDurationLimit;
        
        private string _callID;
        
        private string _cdrid;
        
        private string _crmCompanyName;
        
        private string _crmPersonName;
        
        private string _crmPictureURL;
        
        private int _cSeq;
        
        private string _direction;
        
        private string _hangupAt;
        
        private string _id;
        
        private string _inserted;
        
        private string _localTag;
        
        private string _localUserField;
        
        private string _owner;
        
        private string _proxySIPSocket;
        
        private string _remoteSDP;
        
        private string _remoteTag;
        
        private string _remoteTarget;
        
        private string _remoteUserField;
        
        private string _routeSet;
        
        private string _sdp;
        
        private string _switchboardCallerDescription;
        
        private string _switchboardDescription;
        
        private string _switchboardLineName;
        
        private string _switchboardOwner;
        
        private string _transferMode;
        
        #region Definitionen der Extensibility-Methode

        /// <summary>
        /// Diese Methode wird nach Abschluss der Initialisierung vom Konstruktor aufgerufen
        /// und kann für das weitere Objektsetup verwendet werden.
        /// </summary>
        partial void OnCreated();
        partial void OnAdminMemberIDChanging(string value);
        partial void OnAdminMemberIDChanged();
        partial void OnBridgeIDChanging(string value);
        partial void OnBridgeIDChanged();
        partial void OnCallDurationLimitChanging(Nullable<int> value);
        partial void OnCallDurationLimitChanged();
        partial void OnCallIDChanging(string value);
        partial void OnCallIDChanged();
        partial void OnCDRIDChanging(string value);
        partial void OnCDRIDChanged();
        partial void OnCRMCompanyNameChanging(string value);
        partial void OnCRMCompanyNameChanged();
        partial void OnCRMPersonNameChanging(string value);
        partial void OnCRMPersonNameChanged();
        partial void OnCRMPictureURLChanging(string value);
        partial void OnCRMPictureURLChanged();
        partial void OnCSeqChanging(int value);
        partial void OnCSeqChanged();
        partial void OnDirectionChanging(string value);
        partial void OnDirectionChanged();
        partial void OnHangupAtChanging(string value);
        partial void OnHangupAtChanged();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnInsertedChanging(string value);
        partial void OnInsertedChanged();
        partial void OnLocalTagChanging(string value);
        partial void OnLocalTagChanged();
        partial void OnLocalUserFieldChanging(string value);
        partial void OnLocalUserFieldChanged();
        partial void OnOwnerChanging(string value);
        partial void OnOwnerChanged();
        partial void OnProxySIPSocketChanging(string value);
        partial void OnProxySIPSocketChanged();
        partial void OnRemoteSDPChanging(string value);
        partial void OnRemoteSDPChanged();
        partial void OnRemoteTagChanging(string value);
        partial void OnRemoteTagChanged();
        partial void OnRemoteTargetChanging(string value);
        partial void OnRemoteTargetChanged();
        partial void OnRemoteUserFieldChanging(string value);
        partial void OnRemoteUserFieldChanged();
        partial void OnRouteSetChanging(string value);
        partial void OnRouteSetChanged();
        partial void OnSDPChanging(string value);
        partial void OnSDPChanged();
        partial void OnSwitchboardCallerDescriptionChanging(string value);
        partial void OnSwitchboardCallerDescriptionChanged();
        partial void OnSwitchboardDescriptionChanging(string value);
        partial void OnSwitchboardDescriptionChanged();
        partial void OnSwitchboardLineNameChanging(string value);
        partial void OnSwitchboardLineNameChanged();
        partial void OnSwitchboardOwnerChanging(string value);
        partial void OnSwitchboardOwnerChanged();
        partial void OnTransferModeChanging(string value);
        partial void OnTransferModeChanged();

        #endregion
        
        
        /// <summary>
        /// Initialisiert eine neue Instanz der <see cref="SIPDialogue"/>-Klasse.
        /// </summary>
        public SIPDialogue()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Ruft den "AdminMemberID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string AdminMemberID
        {
            get
            {
                return this._adminMemberID;
            }
            set
            {
                if ((this._adminMemberID != value))
                {
                    this.OnAdminMemberIDChanging(value);
                    this.RaiseDataMemberChanging("AdminMemberID");
                    this.ValidateProperty("AdminMemberID", value);
                    this._adminMemberID = value;
                    this.RaiseDataMemberChanged("AdminMemberID");
                    this.OnAdminMemberIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "BridgeID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string BridgeID
        {
            get
            {
                return this._bridgeID;
            }
            set
            {
                if ((this._bridgeID != value))
                {
                    this.OnBridgeIDChanging(value);
                    this.RaiseDataMemberChanging("BridgeID");
                    this.ValidateProperty("BridgeID", value);
                    this._bridgeID = value;
                    this.RaiseDataMemberChanged("BridgeID");
                    this.OnBridgeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "CallDurationLimit"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public Nullable<int> CallDurationLimit
        {
            get
            {
                return this._callDurationLimit;
            }
            set
            {
                if ((this._callDurationLimit != value))
                {
                    this.OnCallDurationLimitChanging(value);
                    this.RaiseDataMemberChanging("CallDurationLimit");
                    this.ValidateProperty("CallDurationLimit", value);
                    this._callDurationLimit = value;
                    this.RaiseDataMemberChanged("CallDurationLimit");
                    this.OnCallDurationLimitChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "CallID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string CallID
        {
            get
            {
                return this._callID;
            }
            set
            {
                if ((this._callID != value))
                {
                    this.OnCallIDChanging(value);
                    this.RaiseDataMemberChanging("CallID");
                    this.ValidateProperty("CallID", value);
                    this._callID = value;
                    this.RaiseDataMemberChanged("CallID");
                    this.OnCallIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "CDRID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string CDRID
        {
            get
            {
                return this._cdrid;
            }
            set
            {
                if ((this._cdrid != value))
                {
                    this.OnCDRIDChanging(value);
                    this.RaiseDataMemberChanging("CDRID");
                    this.ValidateProperty("CDRID", value);
                    this._cdrid = value;
                    this.RaiseDataMemberChanged("CDRID");
                    this.OnCDRIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "CRMCompanyName"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string CRMCompanyName
        {
            get
            {
                return this._crmCompanyName;
            }
            set
            {
                if ((this._crmCompanyName != value))
                {
                    this.OnCRMCompanyNameChanging(value);
                    this.RaiseDataMemberChanging("CRMCompanyName");
                    this.ValidateProperty("CRMCompanyName", value);
                    this._crmCompanyName = value;
                    this.RaiseDataMemberChanged("CRMCompanyName");
                    this.OnCRMCompanyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "CRMPersonName"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string CRMPersonName
        {
            get
            {
                return this._crmPersonName;
            }
            set
            {
                if ((this._crmPersonName != value))
                {
                    this.OnCRMPersonNameChanging(value);
                    this.RaiseDataMemberChanging("CRMPersonName");
                    this.ValidateProperty("CRMPersonName", value);
                    this._crmPersonName = value;
                    this.RaiseDataMemberChanged("CRMPersonName");
                    this.OnCRMPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "CRMPictureURL"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string CRMPictureURL
        {
            get
            {
                return this._crmPictureURL;
            }
            set
            {
                if ((this._crmPictureURL != value))
                {
                    this.OnCRMPictureURLChanging(value);
                    this.RaiseDataMemberChanging("CRMPictureURL");
                    this.ValidateProperty("CRMPictureURL", value);
                    this._crmPictureURL = value;
                    this.RaiseDataMemberChanged("CRMPictureURL");
                    this.OnCRMPictureURLChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "CSeq"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public int CSeq
        {
            get
            {
                return this._cSeq;
            }
            set
            {
                if ((this._cSeq != value))
                {
                    this.OnCSeqChanging(value);
                    this.RaiseDataMemberChanging("CSeq");
                    this.ValidateProperty("CSeq", value);
                    this._cSeq = value;
                    this.RaiseDataMemberChanged("CSeq");
                    this.OnCSeqChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Direction"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Direction
        {
            get
            {
                return this._direction;
            }
            set
            {
                if ((this._direction != value))
                {
                    this.OnDirectionChanging(value);
                    this.RaiseDataMemberChanging("Direction");
                    this.ValidateProperty("Direction", value);
                    this._direction = value;
                    this.RaiseDataMemberChanged("Direction");
                    this.OnDirectionChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "HangupAt"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string HangupAt
        {
            get
            {
                return this._hangupAt;
            }
            set
            {
                if ((this._hangupAt != value))
                {
                    this.OnHangupAtChanging(value);
                    this.RaiseDataMemberChanging("HangupAt");
                    this.ValidateProperty("HangupAt", value);
                    this._hangupAt = value;
                    this.RaiseDataMemberChanged("HangupAt");
                    this.OnHangupAtChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public string ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Inserted"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Inserted
        {
            get
            {
                return this._inserted;
            }
            set
            {
                if ((this._inserted != value))
                {
                    this.OnInsertedChanging(value);
                    this.RaiseDataMemberChanging("Inserted");
                    this.ValidateProperty("Inserted", value);
                    this._inserted = value;
                    this.RaiseDataMemberChanged("Inserted");
                    this.OnInsertedChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "LocalTag"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string LocalTag
        {
            get
            {
                return this._localTag;
            }
            set
            {
                if ((this._localTag != value))
                {
                    this.OnLocalTagChanging(value);
                    this.RaiseDataMemberChanging("LocalTag");
                    this.ValidateProperty("LocalTag", value);
                    this._localTag = value;
                    this.RaiseDataMemberChanged("LocalTag");
                    this.OnLocalTagChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "LocalUserField"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string LocalUserField
        {
            get
            {
                return this._localUserField;
            }
            set
            {
                if ((this._localUserField != value))
                {
                    this.OnLocalUserFieldChanging(value);
                    this.RaiseDataMemberChanging("LocalUserField");
                    this.ValidateProperty("LocalUserField", value);
                    this._localUserField = value;
                    this.RaiseDataMemberChanged("LocalUserField");
                    this.OnLocalUserFieldChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Owner"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Owner
        {
            get
            {
                return this._owner;
            }
            set
            {
                if ((this._owner != value))
                {
                    this.OnOwnerChanging(value);
                    this.RaiseDataMemberChanging("Owner");
                    this.ValidateProperty("Owner", value);
                    this._owner = value;
                    this.RaiseDataMemberChanged("Owner");
                    this.OnOwnerChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ProxySIPSocket"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string ProxySIPSocket
        {
            get
            {
                return this._proxySIPSocket;
            }
            set
            {
                if ((this._proxySIPSocket != value))
                {
                    this.OnProxySIPSocketChanging(value);
                    this.RaiseDataMemberChanging("ProxySIPSocket");
                    this.ValidateProperty("ProxySIPSocket", value);
                    this._proxySIPSocket = value;
                    this.RaiseDataMemberChanged("ProxySIPSocket");
                    this.OnProxySIPSocketChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "RemoteSDP"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string RemoteSDP
        {
            get
            {
                return this._remoteSDP;
            }
            set
            {
                if ((this._remoteSDP != value))
                {
                    this.OnRemoteSDPChanging(value);
                    this.RaiseDataMemberChanging("RemoteSDP");
                    this.ValidateProperty("RemoteSDP", value);
                    this._remoteSDP = value;
                    this.RaiseDataMemberChanged("RemoteSDP");
                    this.OnRemoteSDPChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "RemoteTag"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string RemoteTag
        {
            get
            {
                return this._remoteTag;
            }
            set
            {
                if ((this._remoteTag != value))
                {
                    this.OnRemoteTagChanging(value);
                    this.RaiseDataMemberChanging("RemoteTag");
                    this.ValidateProperty("RemoteTag", value);
                    this._remoteTag = value;
                    this.RaiseDataMemberChanged("RemoteTag");
                    this.OnRemoteTagChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "RemoteTarget"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string RemoteTarget
        {
            get
            {
                return this._remoteTarget;
            }
            set
            {
                if ((this._remoteTarget != value))
                {
                    this.OnRemoteTargetChanging(value);
                    this.RaiseDataMemberChanging("RemoteTarget");
                    this.ValidateProperty("RemoteTarget", value);
                    this._remoteTarget = value;
                    this.RaiseDataMemberChanged("RemoteTarget");
                    this.OnRemoteTargetChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "RemoteUserField"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string RemoteUserField
        {
            get
            {
                return this._remoteUserField;
            }
            set
            {
                if ((this._remoteUserField != value))
                {
                    this.OnRemoteUserFieldChanging(value);
                    this.RaiseDataMemberChanging("RemoteUserField");
                    this.ValidateProperty("RemoteUserField", value);
                    this._remoteUserField = value;
                    this.RaiseDataMemberChanged("RemoteUserField");
                    this.OnRemoteUserFieldChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "RouteSet"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string RouteSet
        {
            get
            {
                return this._routeSet;
            }
            set
            {
                if ((this._routeSet != value))
                {
                    this.OnRouteSetChanging(value);
                    this.RaiseDataMemberChanging("RouteSet");
                    this.ValidateProperty("RouteSet", value);
                    this._routeSet = value;
                    this.RaiseDataMemberChanged("RouteSet");
                    this.OnRouteSetChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "SDP"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string SDP
        {
            get
            {
                return this._sdp;
            }
            set
            {
                if ((this._sdp != value))
                {
                    this.OnSDPChanging(value);
                    this.RaiseDataMemberChanging("SDP");
                    this.ValidateProperty("SDP", value);
                    this._sdp = value;
                    this.RaiseDataMemberChanged("SDP");
                    this.OnSDPChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "SwitchboardCallerDescription"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string SwitchboardCallerDescription
        {
            get
            {
                return this._switchboardCallerDescription;
            }
            set
            {
                if ((this._switchboardCallerDescription != value))
                {
                    this.OnSwitchboardCallerDescriptionChanging(value);
                    this.RaiseDataMemberChanging("SwitchboardCallerDescription");
                    this.ValidateProperty("SwitchboardCallerDescription", value);
                    this._switchboardCallerDescription = value;
                    this.RaiseDataMemberChanged("SwitchboardCallerDescription");
                    this.OnSwitchboardCallerDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "SwitchboardDescription"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string SwitchboardDescription
        {
            get
            {
                return this._switchboardDescription;
            }
            set
            {
                if ((this._switchboardDescription != value))
                {
                    this.OnSwitchboardDescriptionChanging(value);
                    this.RaiseDataMemberChanging("SwitchboardDescription");
                    this.ValidateProperty("SwitchboardDescription", value);
                    this._switchboardDescription = value;
                    this.RaiseDataMemberChanged("SwitchboardDescription");
                    this.OnSwitchboardDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "SwitchboardLineName"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string SwitchboardLineName
        {
            get
            {
                return this._switchboardLineName;
            }
            set
            {
                if ((this._switchboardLineName != value))
                {
                    this.OnSwitchboardLineNameChanging(value);
                    this.RaiseDataMemberChanging("SwitchboardLineName");
                    this.ValidateProperty("SwitchboardLineName", value);
                    this._switchboardLineName = value;
                    this.RaiseDataMemberChanged("SwitchboardLineName");
                    this.OnSwitchboardLineNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "SwitchboardOwner"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string SwitchboardOwner
        {
            get
            {
                return this._switchboardOwner;
            }
            set
            {
                if ((this._switchboardOwner != value))
                {
                    this.OnSwitchboardOwnerChanging(value);
                    this.RaiseDataMemberChanging("SwitchboardOwner");
                    this.ValidateProperty("SwitchboardOwner", value);
                    this._switchboardOwner = value;
                    this.RaiseDataMemberChanged("SwitchboardOwner");
                    this.OnSwitchboardOwnerChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "TransferMode"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string TransferMode
        {
            get
            {
                return this._transferMode;
            }
            set
            {
                if ((this._transferMode != value))
                {
                    this.OnTransferModeChanging(value);
                    this.RaiseDataMemberChanging("TransferMode");
                    this.ValidateProperty("TransferMode", value);
                    this._transferMode = value;
                    this.RaiseDataMemberChanged("TransferMode");
                    this.OnTransferModeChanged();
                }
            }
        }
        
        /// <summary>
        /// Berechnet einen Wert aus den Schlüsselfeldern, der diese Entitätsinstanz eindeutig identifiziert.
        /// </summary>
        /// <returns>Eine Objektinstanz, die diese Entitätsinstanz eindeutig identifiziert.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// Die "SIPDialPlan"-Entitätsklasse.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SIPSorcery.Entities")]
    public sealed partial class SIPDialPlan : Entity
    {
        
        private bool _acceptNonInvite;
        
        private string _adminMemberId;
        
        private string _authorisedApps;
        
        private string _dialPlanName;
        
        private string _dialPlanScript;
        
        private int _executionCount;
        
        private string _id;
        
        private string _inserted;
        
        private bool _isReadOnly;
        
        private string _lastUpdate;
        
        private int _maxExecutionCount;
        
        private string _owner;
        
        private string _scriptTypeDescription;
        
        private EntityCollection<SimpleWizardRule> _simplewizardrules;
        
        private EntityCollection<SIPDialplanLookup> _sipdialplanlookups;
        
        private EntityCollection<SIPDialplanOption> _sipdialplanoptions;
        
        private EntityCollection<SIPDialplanProvider> _sipdialplanproviders;
        
        private EntityCollection<SIPDialplanRoute> _sipdialplanroutes;
        
        private string _traceEmailAddress;
        
        #region Definitionen der Extensibility-Methode

        /// <summary>
        /// Diese Methode wird nach Abschluss der Initialisierung vom Konstruktor aufgerufen
        /// und kann für das weitere Objektsetup verwendet werden.
        /// </summary>
        partial void OnCreated();
        partial void OnAcceptNonInviteChanging(bool value);
        partial void OnAcceptNonInviteChanged();
        partial void OnAdminMemberIdChanging(string value);
        partial void OnAdminMemberIdChanged();
        partial void OnAuthorisedAppsChanging(string value);
        partial void OnAuthorisedAppsChanged();
        partial void OnDialPlanNameChanging(string value);
        partial void OnDialPlanNameChanged();
        partial void OnDialPlanScriptChanging(string value);
        partial void OnDialPlanScriptChanged();
        partial void OnExecutionCountChanging(int value);
        partial void OnExecutionCountChanged();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnInsertedChanging(string value);
        partial void OnInsertedChanged();
        partial void OnIsReadOnlyChanging(bool value);
        partial void OnIsReadOnlyChanged();
        partial void OnLastUpdateChanging(string value);
        partial void OnLastUpdateChanged();
        partial void OnMaxExecutionCountChanging(int value);
        partial void OnMaxExecutionCountChanged();
        partial void OnOwnerChanging(string value);
        partial void OnOwnerChanged();
        partial void OnScriptTypeDescriptionChanging(string value);
        partial void OnScriptTypeDescriptionChanged();
        partial void OnTraceEmailAddressChanging(string value);
        partial void OnTraceEmailAddressChanged();

        #endregion
        
        
        /// <summary>
        /// Initialisiert eine neue Instanz der <see cref="SIPDialPlan"/>-Klasse.
        /// </summary>
        public SIPDialPlan()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Ruft den "AcceptNonInvite"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public bool AcceptNonInvite
        {
            get
            {
                return this._acceptNonInvite;
            }
            set
            {
                if ((this._acceptNonInvite != value))
                {
                    this.OnAcceptNonInviteChanging(value);
                    this.RaiseDataMemberChanging("AcceptNonInvite");
                    this.ValidateProperty("AcceptNonInvite", value);
                    this._acceptNonInvite = value;
                    this.RaiseDataMemberChanged("AcceptNonInvite");
                    this.OnAcceptNonInviteChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "AdminMemberId"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string AdminMemberId
        {
            get
            {
                return this._adminMemberId;
            }
            set
            {
                if ((this._adminMemberId != value))
                {
                    this.OnAdminMemberIdChanging(value);
                    this.RaiseDataMemberChanging("AdminMemberId");
                    this.ValidateProperty("AdminMemberId", value);
                    this._adminMemberId = value;
                    this.RaiseDataMemberChanged("AdminMemberId");
                    this.OnAdminMemberIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "AuthorisedApps"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string AuthorisedApps
        {
            get
            {
                return this._authorisedApps;
            }
            set
            {
                if ((this._authorisedApps != value))
                {
                    this.OnAuthorisedAppsChanging(value);
                    this.RaiseDataMemberChanging("AuthorisedApps");
                    this.ValidateProperty("AuthorisedApps", value);
                    this._authorisedApps = value;
                    this.RaiseDataMemberChanged("AuthorisedApps");
                    this.OnAuthorisedAppsChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "DialPlanName"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string DialPlanName
        {
            get
            {
                return this._dialPlanName;
            }
            set
            {
                if ((this._dialPlanName != value))
                {
                    this.OnDialPlanNameChanging(value);
                    this.RaiseDataMemberChanging("DialPlanName");
                    this.ValidateProperty("DialPlanName", value);
                    this._dialPlanName = value;
                    this.RaiseDataMemberChanged("DialPlanName");
                    this.OnDialPlanNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "DialPlanScript"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string DialPlanScript
        {
            get
            {
                return this._dialPlanScript;
            }
            set
            {
                if ((this._dialPlanScript != value))
                {
                    this.OnDialPlanScriptChanging(value);
                    this.RaiseDataMemberChanging("DialPlanScript");
                    this.ValidateProperty("DialPlanScript", value);
                    this._dialPlanScript = value;
                    this.RaiseDataMemberChanged("DialPlanScript");
                    this.OnDialPlanScriptChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ExecutionCount"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public int ExecutionCount
        {
            get
            {
                return this._executionCount;
            }
            set
            {
                if ((this._executionCount != value))
                {
                    this.OnExecutionCountChanging(value);
                    this.RaiseDataMemberChanging("ExecutionCount");
                    this.ValidateProperty("ExecutionCount", value);
                    this._executionCount = value;
                    this.RaiseDataMemberChanged("ExecutionCount");
                    this.OnExecutionCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public string ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Inserted"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Inserted
        {
            get
            {
                return this._inserted;
            }
            set
            {
                if ((this._inserted != value))
                {
                    this.OnInsertedChanging(value);
                    this.RaiseDataMemberChanging("Inserted");
                    this.ValidateProperty("Inserted", value);
                    this._inserted = value;
                    this.RaiseDataMemberChanged("Inserted");
                    this.OnInsertedChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "IsReadOnly"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public bool IsReadOnly
        {
            get
            {
                return this._isReadOnly;
            }
            set
            {
                if ((this._isReadOnly != value))
                {
                    this.OnIsReadOnlyChanging(value);
                    this.RaiseDataMemberChanging("IsReadOnly");
                    this.ValidateProperty("IsReadOnly", value);
                    this._isReadOnly = value;
                    this.RaiseDataMemberChanged("IsReadOnly");
                    this.OnIsReadOnlyChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "LastUpdate"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string LastUpdate
        {
            get
            {
                return this._lastUpdate;
            }
            set
            {
                if ((this._lastUpdate != value))
                {
                    this.OnLastUpdateChanging(value);
                    this.RaiseDataMemberChanging("LastUpdate");
                    this.ValidateProperty("LastUpdate", value);
                    this._lastUpdate = value;
                    this.RaiseDataMemberChanged("LastUpdate");
                    this.OnLastUpdateChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "MaxExecutionCount"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public int MaxExecutionCount
        {
            get
            {
                return this._maxExecutionCount;
            }
            set
            {
                if ((this._maxExecutionCount != value))
                {
                    this.OnMaxExecutionCountChanging(value);
                    this.RaiseDataMemberChanging("MaxExecutionCount");
                    this.ValidateProperty("MaxExecutionCount", value);
                    this._maxExecutionCount = value;
                    this.RaiseDataMemberChanged("MaxExecutionCount");
                    this.OnMaxExecutionCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Owner"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Owner
        {
            get
            {
                return this._owner;
            }
            set
            {
                if ((this._owner != value))
                {
                    this.OnOwnerChanging(value);
                    this.RaiseDataMemberChanging("Owner");
                    this.ValidateProperty("Owner", value);
                    this._owner = value;
                    this.RaiseDataMemberChanged("Owner");
                    this.OnOwnerChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ScriptTypeDescription"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string ScriptTypeDescription
        {
            get
            {
                return this._scriptTypeDescription;
            }
            set
            {
                if ((this._scriptTypeDescription != value))
                {
                    this.OnScriptTypeDescriptionChanging(value);
                    this.RaiseDataMemberChanging("ScriptTypeDescription");
                    this.ValidateProperty("ScriptTypeDescription", value);
                    this._scriptTypeDescription = value;
                    this.RaiseDataMemberChanged("ScriptTypeDescription");
                    this.OnScriptTypeDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft die Auflistung der zugeordneten <see cref="SimpleWizardRule"/>-Entitätsinstanzen ab.
        /// </summary>
        [Association("SIPDialPlan_SimpleWizardRule", "ID", "DialPlanID")]
        [XmlIgnore()]
        public EntityCollection<SimpleWizardRule> simplewizardrules
        {
            get
            {
                if ((this._simplewizardrules == null))
                {
                    this._simplewizardrules = new EntityCollection<SimpleWizardRule>(this, "simplewizardrules", this.Filtersimplewizardrules, this.Attachsimplewizardrules, this.Detachsimplewizardrules);
                }
                return this._simplewizardrules;
            }
        }
        
        /// <summary>
        /// Ruft die Auflistung der zugeordneten <see cref="SIPDialplanLookup"/>-Entitätsinstanzen ab.
        /// </summary>
        [Association("SIPDialPlan_SIPDialplanLookup", "ID", "DialPlanID")]
        [XmlIgnore()]
        public EntityCollection<SIPDialplanLookup> sipdialplanlookups
        {
            get
            {
                if ((this._sipdialplanlookups == null))
                {
                    this._sipdialplanlookups = new EntityCollection<SIPDialplanLookup>(this, "sipdialplanlookups", this.Filtersipdialplanlookups, this.Attachsipdialplanlookups, this.Detachsipdialplanlookups);
                }
                return this._sipdialplanlookups;
            }
        }
        
        /// <summary>
        /// Ruft die Auflistung der zugeordneten <see cref="SIPDialplanOption"/>-Entitätsinstanzen ab.
        /// </summary>
        [Association("SIPDialPlan_SIPDialplanOption", "ID", "DialPlanID")]
        [XmlIgnore()]
        public EntityCollection<SIPDialplanOption> sipdialplanoptions
        {
            get
            {
                if ((this._sipdialplanoptions == null))
                {
                    this._sipdialplanoptions = new EntityCollection<SIPDialplanOption>(this, "sipdialplanoptions", this.Filtersipdialplanoptions, this.Attachsipdialplanoptions, this.Detachsipdialplanoptions);
                }
                return this._sipdialplanoptions;
            }
        }
        
        /// <summary>
        /// Ruft die Auflistung der zugeordneten <see cref="SIPDialplanProvider"/>-Entitätsinstanzen ab.
        /// </summary>
        [Association("SIPDialPlan_SIPDialplanProvider", "ID", "DialPlanID")]
        [XmlIgnore()]
        public EntityCollection<SIPDialplanProvider> sipdialplanproviders
        {
            get
            {
                if ((this._sipdialplanproviders == null))
                {
                    this._sipdialplanproviders = new EntityCollection<SIPDialplanProvider>(this, "sipdialplanproviders", this.Filtersipdialplanproviders, this.Attachsipdialplanproviders, this.Detachsipdialplanproviders);
                }
                return this._sipdialplanproviders;
            }
        }
        
        /// <summary>
        /// Ruft die Auflistung der zugeordneten <see cref="SIPDialplanRoute"/>-Entitätsinstanzen ab.
        /// </summary>
        [Association("SIPDialPlan_SIPDialplanRoute", "ID", "DialPlanID")]
        [XmlIgnore()]
        public EntityCollection<SIPDialplanRoute> sipdialplanroutes
        {
            get
            {
                if ((this._sipdialplanroutes == null))
                {
                    this._sipdialplanroutes = new EntityCollection<SIPDialplanRoute>(this, "sipdialplanroutes", this.Filtersipdialplanroutes, this.Attachsipdialplanroutes, this.Detachsipdialplanroutes);
                }
                return this._sipdialplanroutes;
            }
        }
        
        /// <summary>
        /// Ruft den "TraceEmailAddress"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string TraceEmailAddress
        {
            get
            {
                return this._traceEmailAddress;
            }
            set
            {
                if ((this._traceEmailAddress != value))
                {
                    this.OnTraceEmailAddressChanging(value);
                    this.RaiseDataMemberChanging("TraceEmailAddress");
                    this.ValidateProperty("TraceEmailAddress", value);
                    this._traceEmailAddress = value;
                    this.RaiseDataMemberChanged("TraceEmailAddress");
                    this.OnTraceEmailAddressChanged();
                }
            }
        }
        
        private void Attachsimplewizardrules(SimpleWizardRule entity)
        {
            entity.sipdialplan = this;
        }
        
        private void Detachsimplewizardrules(SimpleWizardRule entity)
        {
            entity.sipdialplan = null;
        }
        
        private bool Filtersimplewizardrules(SimpleWizardRule entity)
        {
            return (entity.DialPlanID == this.ID);
        }
        
        private void Attachsipdialplanlookups(SIPDialplanLookup entity)
        {
            entity.sipdialplan = this;
        }
        
        private void Detachsipdialplanlookups(SIPDialplanLookup entity)
        {
            entity.sipdialplan = null;
        }
        
        private bool Filtersipdialplanlookups(SIPDialplanLookup entity)
        {
            return (entity.DialPlanID == this.ID);
        }
        
        private void Attachsipdialplanoptions(SIPDialplanOption entity)
        {
            entity.sipdialplan = this;
        }
        
        private void Detachsipdialplanoptions(SIPDialplanOption entity)
        {
            entity.sipdialplan = null;
        }
        
        private bool Filtersipdialplanoptions(SIPDialplanOption entity)
        {
            return (entity.DialPlanID == this.ID);
        }
        
        private void Attachsipdialplanproviders(SIPDialplanProvider entity)
        {
            entity.sipdialplan = this;
        }
        
        private void Detachsipdialplanproviders(SIPDialplanProvider entity)
        {
            entity.sipdialplan = null;
        }
        
        private bool Filtersipdialplanproviders(SIPDialplanProvider entity)
        {
            return (entity.DialPlanID == this.ID);
        }
        
        private void Attachsipdialplanroutes(SIPDialplanRoute entity)
        {
            entity.sipdialplan = this;
        }
        
        private void Detachsipdialplanroutes(SIPDialplanRoute entity)
        {
            entity.sipdialplan = null;
        }
        
        private bool Filtersipdialplanroutes(SIPDialplanRoute entity)
        {
            return (entity.DialPlanID == this.ID);
        }
        
        /// <summary>
        /// Berechnet einen Wert aus den Schlüsselfeldern, der diese Entitätsinstanz eindeutig identifiziert.
        /// </summary>
        /// <returns>Eine Objektinstanz, die diese Entitätsinstanz eindeutig identifiziert.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// Die "SIPDialplanLookup"-Entitätsklasse.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SIPSorcery.Entities")]
    public sealed partial class SIPDialplanLookup : Entity
    {
        
        private string _description;
        
        private string _dialPlanID;
        
        private string _id;
        
        private string _lookupKey;
        
        private int _lookupType;
        
        private string _lookupValue;
        
        private string _owner;
        
        private EntityRef<SIPDialPlan> _sipdialplan;
        
        #region Definitionen der Extensibility-Methode

        /// <summary>
        /// Diese Methode wird nach Abschluss der Initialisierung vom Konstruktor aufgerufen
        /// und kann für das weitere Objektsetup verwendet werden.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnDialPlanIDChanging(string value);
        partial void OnDialPlanIDChanged();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnLookupKeyChanging(string value);
        partial void OnLookupKeyChanged();
        partial void OnLookupTypeChanging(int value);
        partial void OnLookupTypeChanged();
        partial void OnLookupValueChanging(string value);
        partial void OnLookupValueChanged();
        partial void OnOwnerChanging(string value);
        partial void OnOwnerChanged();

        #endregion
        
        
        /// <summary>
        /// Initialisiert eine neue Instanz der <see cref="SIPDialplanLookup"/>-Klasse.
        /// </summary>
        public SIPDialplanLookup()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Ruft den "Description"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "DialPlanID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        public string DialPlanID
        {
            get
            {
                return this._dialPlanID;
            }
            set
            {
                if ((this._dialPlanID != value))
                {
                    this.OnDialPlanIDChanging(value);
                    this.RaiseDataMemberChanging("DialPlanID");
                    this.ValidateProperty("DialPlanID", value);
                    this._dialPlanID = value;
                    this.RaiseDataMemberChanged("DialPlanID");
                    this.OnDialPlanIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public string ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "LookupKey"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string LookupKey
        {
            get
            {
                return this._lookupKey;
            }
            set
            {
                if ((this._lookupKey != value))
                {
                    this.OnLookupKeyChanging(value);
                    this.RaiseDataMemberChanging("LookupKey");
                    this.ValidateProperty("LookupKey", value);
                    this._lookupKey = value;
                    this.RaiseDataMemberChanged("LookupKey");
                    this.OnLookupKeyChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "LookupType"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public int LookupType
        {
            get
            {
                return this._lookupType;
            }
            set
            {
                if ((this._lookupType != value))
                {
                    this.OnLookupTypeChanging(value);
                    this.RaiseDataMemberChanging("LookupType");
                    this.ValidateProperty("LookupType", value);
                    this._lookupType = value;
                    this.RaiseDataMemberChanged("LookupType");
                    this.OnLookupTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "LookupValue"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string LookupValue
        {
            get
            {
                return this._lookupValue;
            }
            set
            {
                if ((this._lookupValue != value))
                {
                    this.OnLookupValueChanging(value);
                    this.RaiseDataMemberChanging("LookupValue");
                    this.ValidateProperty("LookupValue", value);
                    this._lookupValue = value;
                    this.RaiseDataMemberChanged("LookupValue");
                    this.OnLookupValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Owner"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Owner
        {
            get
            {
                return this._owner;
            }
            set
            {
                if ((this._owner != value))
                {
                    this.OnOwnerChanging(value);
                    this.RaiseDataMemberChanging("Owner");
                    this.ValidateProperty("Owner", value);
                    this._owner = value;
                    this.RaiseDataMemberChanged("Owner");
                    this.OnOwnerChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft die zugeordnete <see cref="SIPDialPlan"/>-Entität ab oder legt sie fest.
        /// </summary>
        [Association("SIPDialPlan_SIPDialplanLookup", "DialPlanID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public SIPDialPlan sipdialplan
        {
            get
            {
                if ((this._sipdialplan == null))
                {
                    this._sipdialplan = new EntityRef<SIPDialPlan>(this, "sipdialplan", this.Filtersipdialplan);
                }
                return this._sipdialplan.Entity;
            }
            set
            {
                SIPDialPlan previous = this.sipdialplan;
                if ((previous != value))
                {
                    this.ValidateProperty("sipdialplan", value);
                    if ((previous != null))
                    {
                        this._sipdialplan.Entity = null;
                        previous.sipdialplanlookups.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DialPlanID = value.ID;
                    }
                    else
                    {
                        this.DialPlanID = default(string);
                    }
                    this._sipdialplan.Entity = value;
                    if ((value != null))
                    {
                        value.sipdialplanlookups.Add(this);
                    }
                    this.RaisePropertyChanged("sipdialplan");
                }
            }
        }
        
        private bool Filtersipdialplan(SIPDialPlan entity)
        {
            return (entity.ID == this.DialPlanID);
        }
        
        /// <summary>
        /// Berechnet einen Wert aus den Schlüsselfeldern, der diese Entitätsinstanz eindeutig identifiziert.
        /// </summary>
        /// <returns>Eine Objektinstanz, die diese Entitätsinstanz eindeutig identifiziert.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// Die "SIPDialplanOption"-Entitätsklasse.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SIPSorcery.Entities")]
    public sealed partial class SIPDialplanOption : Entity
    {
        
        private string _allowedCountryCodes;
        
        private Nullable<int> _areaCode;
        
        private Nullable<int> _countryCode;
        
        private string _dialPlanID;
        
        private bool _enableSafeguards;
        
        private string _enumServers;
        
        private string _excludedPrefixes;
        
        private string _id;
        
        private string _owner;
        
        private EntityRef<SIPDialPlan> _sipdialplan;
        
        private string _timezone;
        
        private string _whitepagesKey;
        
        #region Definitionen der Extensibility-Methode

        /// <summary>
        /// Diese Methode wird nach Abschluss der Initialisierung vom Konstruktor aufgerufen
        /// und kann für das weitere Objektsetup verwendet werden.
        /// </summary>
        partial void OnCreated();
        partial void OnAllowedCountryCodesChanging(string value);
        partial void OnAllowedCountryCodesChanged();
        partial void OnAreaCodeChanging(Nullable<int> value);
        partial void OnAreaCodeChanged();
        partial void OnCountryCodeChanging(Nullable<int> value);
        partial void OnCountryCodeChanged();
        partial void OnDialPlanIDChanging(string value);
        partial void OnDialPlanIDChanged();
        partial void OnEnableSafeguardsChanging(bool value);
        partial void OnEnableSafeguardsChanged();
        partial void OnENUMServersChanging(string value);
        partial void OnENUMServersChanged();
        partial void OnExcludedPrefixesChanging(string value);
        partial void OnExcludedPrefixesChanged();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnOwnerChanging(string value);
        partial void OnOwnerChanged();
        partial void OnTimezoneChanging(string value);
        partial void OnTimezoneChanged();
        partial void OnWhitepagesKeyChanging(string value);
        partial void OnWhitepagesKeyChanged();

        #endregion
        
        
        /// <summary>
        /// Initialisiert eine neue Instanz der <see cref="SIPDialplanOption"/>-Klasse.
        /// </summary>
        public SIPDialplanOption()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Ruft den "AllowedCountryCodes"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string AllowedCountryCodes
        {
            get
            {
                return this._allowedCountryCodes;
            }
            set
            {
                if ((this._allowedCountryCodes != value))
                {
                    this.OnAllowedCountryCodesChanging(value);
                    this.RaiseDataMemberChanging("AllowedCountryCodes");
                    this.ValidateProperty("AllowedCountryCodes", value);
                    this._allowedCountryCodes = value;
                    this.RaiseDataMemberChanged("AllowedCountryCodes");
                    this.OnAllowedCountryCodesChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "AreaCode"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public Nullable<int> AreaCode
        {
            get
            {
                return this._areaCode;
            }
            set
            {
                if ((this._areaCode != value))
                {
                    this.OnAreaCodeChanging(value);
                    this.RaiseDataMemberChanging("AreaCode");
                    this.ValidateProperty("AreaCode", value);
                    this._areaCode = value;
                    this.RaiseDataMemberChanged("AreaCode");
                    this.OnAreaCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "CountryCode"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public Nullable<int> CountryCode
        {
            get
            {
                return this._countryCode;
            }
            set
            {
                if ((this._countryCode != value))
                {
                    this.OnCountryCodeChanging(value);
                    this.RaiseDataMemberChanging("CountryCode");
                    this.ValidateProperty("CountryCode", value);
                    this._countryCode = value;
                    this.RaiseDataMemberChanged("CountryCode");
                    this.OnCountryCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "DialPlanID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        public string DialPlanID
        {
            get
            {
                return this._dialPlanID;
            }
            set
            {
                if ((this._dialPlanID != value))
                {
                    this.OnDialPlanIDChanging(value);
                    this.RaiseDataMemberChanging("DialPlanID");
                    this.ValidateProperty("DialPlanID", value);
                    this._dialPlanID = value;
                    this.RaiseDataMemberChanged("DialPlanID");
                    this.OnDialPlanIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "EnableSafeguards"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public bool EnableSafeguards
        {
            get
            {
                return this._enableSafeguards;
            }
            set
            {
                if ((this._enableSafeguards != value))
                {
                    this.OnEnableSafeguardsChanging(value);
                    this.RaiseDataMemberChanging("EnableSafeguards");
                    this.ValidateProperty("EnableSafeguards", value);
                    this._enableSafeguards = value;
                    this.RaiseDataMemberChanged("EnableSafeguards");
                    this.OnEnableSafeguardsChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ENUMServers"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string ENUMServers
        {
            get
            {
                return this._enumServers;
            }
            set
            {
                if ((this._enumServers != value))
                {
                    this.OnENUMServersChanging(value);
                    this.RaiseDataMemberChanging("ENUMServers");
                    this.ValidateProperty("ENUMServers", value);
                    this._enumServers = value;
                    this.RaiseDataMemberChanged("ENUMServers");
                    this.OnENUMServersChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ExcludedPrefixes"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string ExcludedPrefixes
        {
            get
            {
                return this._excludedPrefixes;
            }
            set
            {
                if ((this._excludedPrefixes != value))
                {
                    this.OnExcludedPrefixesChanging(value);
                    this.RaiseDataMemberChanging("ExcludedPrefixes");
                    this.ValidateProperty("ExcludedPrefixes", value);
                    this._excludedPrefixes = value;
                    this.RaiseDataMemberChanged("ExcludedPrefixes");
                    this.OnExcludedPrefixesChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public string ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Owner"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Owner
        {
            get
            {
                return this._owner;
            }
            set
            {
                if ((this._owner != value))
                {
                    this.OnOwnerChanging(value);
                    this.RaiseDataMemberChanging("Owner");
                    this.ValidateProperty("Owner", value);
                    this._owner = value;
                    this.RaiseDataMemberChanged("Owner");
                    this.OnOwnerChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft die zugeordnete <see cref="SIPDialPlan"/>-Entität ab oder legt sie fest.
        /// </summary>
        [Association("SIPDialPlan_SIPDialplanOption", "DialPlanID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public SIPDialPlan sipdialplan
        {
            get
            {
                if ((this._sipdialplan == null))
                {
                    this._sipdialplan = new EntityRef<SIPDialPlan>(this, "sipdialplan", this.Filtersipdialplan);
                }
                return this._sipdialplan.Entity;
            }
            set
            {
                SIPDialPlan previous = this.sipdialplan;
                if ((previous != value))
                {
                    this.ValidateProperty("sipdialplan", value);
                    if ((previous != null))
                    {
                        this._sipdialplan.Entity = null;
                        previous.sipdialplanoptions.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DialPlanID = value.ID;
                    }
                    else
                    {
                        this.DialPlanID = default(string);
                    }
                    this._sipdialplan.Entity = value;
                    if ((value != null))
                    {
                        value.sipdialplanoptions.Add(this);
                    }
                    this.RaisePropertyChanged("sipdialplan");
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Timezone"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string Timezone
        {
            get
            {
                return this._timezone;
            }
            set
            {
                if ((this._timezone != value))
                {
                    this.OnTimezoneChanging(value);
                    this.RaiseDataMemberChanging("Timezone");
                    this.ValidateProperty("Timezone", value);
                    this._timezone = value;
                    this.RaiseDataMemberChanged("Timezone");
                    this.OnTimezoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "WhitepagesKey"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string WhitepagesKey
        {
            get
            {
                return this._whitepagesKey;
            }
            set
            {
                if ((this._whitepagesKey != value))
                {
                    this.OnWhitepagesKeyChanging(value);
                    this.RaiseDataMemberChanging("WhitepagesKey");
                    this.ValidateProperty("WhitepagesKey", value);
                    this._whitepagesKey = value;
                    this.RaiseDataMemberChanged("WhitepagesKey");
                    this.OnWhitepagesKeyChanged();
                }
            }
        }
        
        private bool Filtersipdialplan(SIPDialPlan entity)
        {
            return (entity.ID == this.DialPlanID);
        }
        
        /// <summary>
        /// Berechnet einen Wert aus den Schlüsselfeldern, der diese Entitätsinstanz eindeutig identifiziert.
        /// </summary>
        /// <returns>Eine Objektinstanz, die diese Entitätsinstanz eindeutig identifiziert.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// Die "SIPDialplanProvider"-Entitätsklasse.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SIPSorcery.Entities")]
    public sealed partial class SIPDialplanProvider : Entity
    {
        
        private string _dialPlanID;
        
        private string _id;
        
        private string _owner;
        
        private string _providerDescription;
        
        private string _providerDialString;
        
        private string _providerName;
        
        private string _providerPrefix;
        
        private EntityRef<SIPDialPlan> _sipdialplan;
        
        #region Definitionen der Extensibility-Methode

        /// <summary>
        /// Diese Methode wird nach Abschluss der Initialisierung vom Konstruktor aufgerufen
        /// und kann für das weitere Objektsetup verwendet werden.
        /// </summary>
        partial void OnCreated();
        partial void OnDialPlanIDChanging(string value);
        partial void OnDialPlanIDChanged();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnOwnerChanging(string value);
        partial void OnOwnerChanged();
        partial void OnProviderDescriptionChanging(string value);
        partial void OnProviderDescriptionChanged();
        partial void OnProviderDialStringChanging(string value);
        partial void OnProviderDialStringChanged();
        partial void OnProviderNameChanging(string value);
        partial void OnProviderNameChanged();
        partial void OnProviderPrefixChanging(string value);
        partial void OnProviderPrefixChanged();

        #endregion
        
        
        /// <summary>
        /// Initialisiert eine neue Instanz der <see cref="SIPDialplanProvider"/>-Klasse.
        /// </summary>
        public SIPDialplanProvider()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Ruft den "DialPlanID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        public string DialPlanID
        {
            get
            {
                return this._dialPlanID;
            }
            set
            {
                if ((this._dialPlanID != value))
                {
                    this.OnDialPlanIDChanging(value);
                    this.RaiseDataMemberChanging("DialPlanID");
                    this.ValidateProperty("DialPlanID", value);
                    this._dialPlanID = value;
                    this.RaiseDataMemberChanged("DialPlanID");
                    this.OnDialPlanIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public string ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Owner"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Owner
        {
            get
            {
                return this._owner;
            }
            set
            {
                if ((this._owner != value))
                {
                    this.OnOwnerChanging(value);
                    this.RaiseDataMemberChanging("Owner");
                    this.ValidateProperty("Owner", value);
                    this._owner = value;
                    this.RaiseDataMemberChanged("Owner");
                    this.OnOwnerChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ProviderDescription"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string ProviderDescription
        {
            get
            {
                return this._providerDescription;
            }
            set
            {
                if ((this._providerDescription != value))
                {
                    this.OnProviderDescriptionChanging(value);
                    this.RaiseDataMemberChanging("ProviderDescription");
                    this.ValidateProperty("ProviderDescription", value);
                    this._providerDescription = value;
                    this.RaiseDataMemberChanged("ProviderDescription");
                    this.OnProviderDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ProviderDialString"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string ProviderDialString
        {
            get
            {
                return this._providerDialString;
            }
            set
            {
                if ((this._providerDialString != value))
                {
                    this.OnProviderDialStringChanging(value);
                    this.RaiseDataMemberChanging("ProviderDialString");
                    this.ValidateProperty("ProviderDialString", value);
                    this._providerDialString = value;
                    this.RaiseDataMemberChanged("ProviderDialString");
                    this.OnProviderDialStringChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ProviderName"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string ProviderName
        {
            get
            {
                return this._providerName;
            }
            set
            {
                if ((this._providerName != value))
                {
                    this.OnProviderNameChanging(value);
                    this.RaiseDataMemberChanging("ProviderName");
                    this.ValidateProperty("ProviderName", value);
                    this._providerName = value;
                    this.RaiseDataMemberChanged("ProviderName");
                    this.OnProviderNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ProviderPrefix"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string ProviderPrefix
        {
            get
            {
                return this._providerPrefix;
            }
            set
            {
                if ((this._providerPrefix != value))
                {
                    this.OnProviderPrefixChanging(value);
                    this.RaiseDataMemberChanging("ProviderPrefix");
                    this.ValidateProperty("ProviderPrefix", value);
                    this._providerPrefix = value;
                    this.RaiseDataMemberChanged("ProviderPrefix");
                    this.OnProviderPrefixChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft die zugeordnete <see cref="SIPDialPlan"/>-Entität ab oder legt sie fest.
        /// </summary>
        [Association("SIPDialPlan_SIPDialplanProvider", "DialPlanID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public SIPDialPlan sipdialplan
        {
            get
            {
                if ((this._sipdialplan == null))
                {
                    this._sipdialplan = new EntityRef<SIPDialPlan>(this, "sipdialplan", this.Filtersipdialplan);
                }
                return this._sipdialplan.Entity;
            }
            set
            {
                SIPDialPlan previous = this.sipdialplan;
                if ((previous != value))
                {
                    this.ValidateProperty("sipdialplan", value);
                    if ((previous != null))
                    {
                        this._sipdialplan.Entity = null;
                        previous.sipdialplanproviders.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DialPlanID = value.ID;
                    }
                    else
                    {
                        this.DialPlanID = default(string);
                    }
                    this._sipdialplan.Entity = value;
                    if ((value != null))
                    {
                        value.sipdialplanproviders.Add(this);
                    }
                    this.RaisePropertyChanged("sipdialplan");
                }
            }
        }
        
        private bool Filtersipdialplan(SIPDialPlan entity)
        {
            return (entity.ID == this.DialPlanID);
        }
        
        /// <summary>
        /// Berechnet einen Wert aus den Schlüsselfeldern, der diese Entitätsinstanz eindeutig identifiziert.
        /// </summary>
        /// <returns>Eine Objektinstanz, die diese Entitätsinstanz eindeutig identifiziert.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// Die "SIPDialplanRoute"-Entitätsklasse.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SIPSorcery.Entities")]
    public sealed partial class SIPDialplanRoute : Entity
    {
        
        private string _dialPlanID;
        
        private string _id;
        
        private string _owner;
        
        private string _routeDescription;
        
        private string _routeDestination;
        
        private string _routeName;
        
        private string _routePattern;
        
        private EntityRef<SIPDialPlan> _sipdialplan;
        
        #region Definitionen der Extensibility-Methode

        /// <summary>
        /// Diese Methode wird nach Abschluss der Initialisierung vom Konstruktor aufgerufen
        /// und kann für das weitere Objektsetup verwendet werden.
        /// </summary>
        partial void OnCreated();
        partial void OnDialPlanIDChanging(string value);
        partial void OnDialPlanIDChanged();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnOwnerChanging(string value);
        partial void OnOwnerChanged();
        partial void OnRouteDescriptionChanging(string value);
        partial void OnRouteDescriptionChanged();
        partial void OnRouteDestinationChanging(string value);
        partial void OnRouteDestinationChanged();
        partial void OnRouteNameChanging(string value);
        partial void OnRouteNameChanged();
        partial void OnRoutePatternChanging(string value);
        partial void OnRoutePatternChanged();

        #endregion
        
        
        /// <summary>
        /// Initialisiert eine neue Instanz der <see cref="SIPDialplanRoute"/>-Klasse.
        /// </summary>
        public SIPDialplanRoute()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Ruft den "DialPlanID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        public string DialPlanID
        {
            get
            {
                return this._dialPlanID;
            }
            set
            {
                if ((this._dialPlanID != value))
                {
                    this.OnDialPlanIDChanging(value);
                    this.RaiseDataMemberChanging("DialPlanID");
                    this.ValidateProperty("DialPlanID", value);
                    this._dialPlanID = value;
                    this.RaiseDataMemberChanged("DialPlanID");
                    this.OnDialPlanIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public string ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Owner"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Owner
        {
            get
            {
                return this._owner;
            }
            set
            {
                if ((this._owner != value))
                {
                    this.OnOwnerChanging(value);
                    this.RaiseDataMemberChanging("Owner");
                    this.ValidateProperty("Owner", value);
                    this._owner = value;
                    this.RaiseDataMemberChanged("Owner");
                    this.OnOwnerChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "RouteDescription"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string RouteDescription
        {
            get
            {
                return this._routeDescription;
            }
            set
            {
                if ((this._routeDescription != value))
                {
                    this.OnRouteDescriptionChanging(value);
                    this.RaiseDataMemberChanging("RouteDescription");
                    this.ValidateProperty("RouteDescription", value);
                    this._routeDescription = value;
                    this.RaiseDataMemberChanged("RouteDescription");
                    this.OnRouteDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "RouteDestination"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string RouteDestination
        {
            get
            {
                return this._routeDestination;
            }
            set
            {
                if ((this._routeDestination != value))
                {
                    this.OnRouteDestinationChanging(value);
                    this.RaiseDataMemberChanging("RouteDestination");
                    this.ValidateProperty("RouteDestination", value);
                    this._routeDestination = value;
                    this.RaiseDataMemberChanged("RouteDestination");
                    this.OnRouteDestinationChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "RouteName"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string RouteName
        {
            get
            {
                return this._routeName;
            }
            set
            {
                if ((this._routeName != value))
                {
                    this.OnRouteNameChanging(value);
                    this.RaiseDataMemberChanging("RouteName");
                    this.ValidateProperty("RouteName", value);
                    this._routeName = value;
                    this.RaiseDataMemberChanged("RouteName");
                    this.OnRouteNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "RoutePattern"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string RoutePattern
        {
            get
            {
                return this._routePattern;
            }
            set
            {
                if ((this._routePattern != value))
                {
                    this.OnRoutePatternChanging(value);
                    this.RaiseDataMemberChanging("RoutePattern");
                    this.ValidateProperty("RoutePattern", value);
                    this._routePattern = value;
                    this.RaiseDataMemberChanged("RoutePattern");
                    this.OnRoutePatternChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft die zugeordnete <see cref="SIPDialPlan"/>-Entität ab oder legt sie fest.
        /// </summary>
        [Association("SIPDialPlan_SIPDialplanRoute", "DialPlanID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public SIPDialPlan sipdialplan
        {
            get
            {
                if ((this._sipdialplan == null))
                {
                    this._sipdialplan = new EntityRef<SIPDialPlan>(this, "sipdialplan", this.Filtersipdialplan);
                }
                return this._sipdialplan.Entity;
            }
            set
            {
                SIPDialPlan previous = this.sipdialplan;
                if ((previous != value))
                {
                    this.ValidateProperty("sipdialplan", value);
                    if ((previous != null))
                    {
                        this._sipdialplan.Entity = null;
                        previous.sipdialplanroutes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DialPlanID = value.ID;
                    }
                    else
                    {
                        this.DialPlanID = default(string);
                    }
                    this._sipdialplan.Entity = value;
                    if ((value != null))
                    {
                        value.sipdialplanroutes.Add(this);
                    }
                    this.RaisePropertyChanged("sipdialplan");
                }
            }
        }
        
        private bool Filtersipdialplan(SIPDialPlan entity)
        {
            return (entity.ID == this.DialPlanID);
        }
        
        /// <summary>
        /// Berechnet einen Wert aus den Schlüsselfeldern, der diese Entitätsinstanz eindeutig identifiziert.
        /// </summary>
        /// <returns>Eine Objektinstanz, die diese Entitätsinstanz eindeutig identifiziert.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// Die "SIPDomain"-Entitätsklasse.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SIPSorcery.Entities")]
    public sealed partial class SIPDomain : Entity
    {
        
        private string _aliasList;
        
        private string _domain;
        
        private string _id;
        
        private string _inserted;
        
        private string _owner;
        
        #region Definitionen der Extensibility-Methode

        /// <summary>
        /// Diese Methode wird nach Abschluss der Initialisierung vom Konstruktor aufgerufen
        /// und kann für das weitere Objektsetup verwendet werden.
        /// </summary>
        partial void OnCreated();
        partial void OnAliasListChanging(string value);
        partial void OnAliasListChanged();
        partial void OnDomainChanging(string value);
        partial void OnDomainChanged();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnInsertedChanging(string value);
        partial void OnInsertedChanged();
        partial void OnOwnerChanging(string value);
        partial void OnOwnerChanged();

        #endregion
        
        
        /// <summary>
        /// Initialisiert eine neue Instanz der <see cref="SIPDomain"/>-Klasse.
        /// </summary>
        public SIPDomain()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Ruft den "AliasList"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string AliasList
        {
            get
            {
                return this._aliasList;
            }
            set
            {
                if ((this._aliasList != value))
                {
                    this.OnAliasListChanging(value);
                    this.RaiseDataMemberChanging("AliasList");
                    this.ValidateProperty("AliasList", value);
                    this._aliasList = value;
                    this.RaiseDataMemberChanged("AliasList");
                    this.OnAliasListChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Domain"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Domain
        {
            get
            {
                return this._domain;
            }
            set
            {
                if ((this._domain != value))
                {
                    this.OnDomainChanging(value);
                    this.RaiseDataMemberChanging("Domain");
                    this.ValidateProperty("Domain", value);
                    this._domain = value;
                    this.RaiseDataMemberChanged("Domain");
                    this.OnDomainChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public string ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Inserted"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Inserted
        {
            get
            {
                return this._inserted;
            }
            set
            {
                if ((this._inserted != value))
                {
                    this.OnInsertedChanging(value);
                    this.RaiseDataMemberChanging("Inserted");
                    this.ValidateProperty("Inserted", value);
                    this._inserted = value;
                    this.RaiseDataMemberChanged("Inserted");
                    this.OnInsertedChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Owner"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string Owner
        {
            get
            {
                return this._owner;
            }
            set
            {
                if ((this._owner != value))
                {
                    this.OnOwnerChanging(value);
                    this.RaiseDataMemberChanging("Owner");
                    this.ValidateProperty("Owner", value);
                    this._owner = value;
                    this.RaiseDataMemberChanged("Owner");
                    this.OnOwnerChanged();
                }
            }
        }
        
        /// <summary>
        /// Berechnet einen Wert aus den Schlüsselfeldern, der diese Entitätsinstanz eindeutig identifiziert.
        /// </summary>
        /// <returns>Eine Objektinstanz, die diese Entitätsinstanz eindeutig identifiziert.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// Die "SIPProvider"-Entitätsklasse.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SIPSorcery.Entities")]
    public sealed partial class SIPProvider : Entity
    {
        
        private string _adminMemberID;
        
        private string _customHeaders;
        
        private string _gvCallbackNumber;
        
        private string _gvCallbackPattern;
        
        private string _gvCallbackType;
        
        private string _id;
        
        private string _inserted;
        
        private bool _isReadOnly;
        
        private string _lastUpdate;
        
        private string _owner;
        
        private string _providerAuthUsername;
        
        private string _providerFrom;
        
        private string _providerName;
        
        private string _providerOutboundProxy;
        
        private string _providerPassword;
        
        private string _providerServer;
        
        private string _providerType;
        
        private string _providerUsername;
        
        private bool _registerAdminEnabled;
        
        private string _registerContact;
        
        private string _registerDisabledReason;
        
        private bool _registerEnabled;
        
        private Nullable<int> _registerExpiry;
        
        private string _registerRealm;
        
        private string _registerServer;
        
        private bool _sendMWISubscribe;
        
        private EntityCollection<SIPProviderBinding> _sipproviderbindings;
        
        #region Definitionen der Extensibility-Methode

        /// <summary>
        /// Diese Methode wird nach Abschluss der Initialisierung vom Konstruktor aufgerufen
        /// und kann für das weitere Objektsetup verwendet werden.
        /// </summary>
        partial void OnCreated();
        partial void OnAdminMemberIDChanging(string value);
        partial void OnAdminMemberIDChanged();
        partial void OnCustomHeadersChanging(string value);
        partial void OnCustomHeadersChanged();
        partial void OnGVCallbackNumberChanging(string value);
        partial void OnGVCallbackNumberChanged();
        partial void OnGVCallbackPatternChanging(string value);
        partial void OnGVCallbackPatternChanged();
        partial void OnGVCallbackTypeChanging(string value);
        partial void OnGVCallbackTypeChanged();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnInsertedChanging(string value);
        partial void OnInsertedChanged();
        partial void OnIsReadOnlyChanging(bool value);
        partial void OnIsReadOnlyChanged();
        partial void OnLastUpdateChanging(string value);
        partial void OnLastUpdateChanged();
        partial void OnOwnerChanging(string value);
        partial void OnOwnerChanged();
        partial void OnProviderAuthUsernameChanging(string value);
        partial void OnProviderAuthUsernameChanged();
        partial void OnProviderFromChanging(string value);
        partial void OnProviderFromChanged();
        partial void OnProviderNameChanging(string value);
        partial void OnProviderNameChanged();
        partial void OnProviderOutboundProxyChanging(string value);
        partial void OnProviderOutboundProxyChanged();
        partial void OnProviderPasswordChanging(string value);
        partial void OnProviderPasswordChanged();
        partial void OnProviderServerChanging(string value);
        partial void OnProviderServerChanged();
        partial void OnProviderTypeChanging(string value);
        partial void OnProviderTypeChanged();
        partial void OnProviderUsernameChanging(string value);
        partial void OnProviderUsernameChanged();
        partial void OnRegisterAdminEnabledChanging(bool value);
        partial void OnRegisterAdminEnabledChanged();
        partial void OnRegisterContactChanging(string value);
        partial void OnRegisterContactChanged();
        partial void OnRegisterDisabledReasonChanging(string value);
        partial void OnRegisterDisabledReasonChanged();
        partial void OnRegisterEnabledChanging(bool value);
        partial void OnRegisterEnabledChanged();
        partial void OnRegisterExpiryChanging(Nullable<int> value);
        partial void OnRegisterExpiryChanged();
        partial void OnRegisterRealmChanging(string value);
        partial void OnRegisterRealmChanged();
        partial void OnRegisterServerChanging(string value);
        partial void OnRegisterServerChanged();
        partial void OnSendMWISubscribeChanging(bool value);
        partial void OnSendMWISubscribeChanged();

        #endregion
        
        
        /// <summary>
        /// Initialisiert eine neue Instanz der <see cref="SIPProvider"/>-Klasse.
        /// </summary>
        public SIPProvider()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Ruft den "AdminMemberID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string AdminMemberID
        {
            get
            {
                return this._adminMemberID;
            }
            set
            {
                if ((this._adminMemberID != value))
                {
                    this.OnAdminMemberIDChanging(value);
                    this.RaiseDataMemberChanging("AdminMemberID");
                    this.ValidateProperty("AdminMemberID", value);
                    this._adminMemberID = value;
                    this.RaiseDataMemberChanged("AdminMemberID");
                    this.OnAdminMemberIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "CustomHeaders"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string CustomHeaders
        {
            get
            {
                return this._customHeaders;
            }
            set
            {
                if ((this._customHeaders != value))
                {
                    this.OnCustomHeadersChanging(value);
                    this.RaiseDataMemberChanging("CustomHeaders");
                    this.ValidateProperty("CustomHeaders", value);
                    this._customHeaders = value;
                    this.RaiseDataMemberChanged("CustomHeaders");
                    this.OnCustomHeadersChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "GVCallbackNumber"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string GVCallbackNumber
        {
            get
            {
                return this._gvCallbackNumber;
            }
            set
            {
                if ((this._gvCallbackNumber != value))
                {
                    this.OnGVCallbackNumberChanging(value);
                    this.RaiseDataMemberChanging("GVCallbackNumber");
                    this.ValidateProperty("GVCallbackNumber", value);
                    this._gvCallbackNumber = value;
                    this.RaiseDataMemberChanged("GVCallbackNumber");
                    this.OnGVCallbackNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "GVCallbackPattern"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string GVCallbackPattern
        {
            get
            {
                return this._gvCallbackPattern;
            }
            set
            {
                if ((this._gvCallbackPattern != value))
                {
                    this.OnGVCallbackPatternChanging(value);
                    this.RaiseDataMemberChanging("GVCallbackPattern");
                    this.ValidateProperty("GVCallbackPattern", value);
                    this._gvCallbackPattern = value;
                    this.RaiseDataMemberChanged("GVCallbackPattern");
                    this.OnGVCallbackPatternChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "GVCallbackType"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string GVCallbackType
        {
            get
            {
                return this._gvCallbackType;
            }
            set
            {
                if ((this._gvCallbackType != value))
                {
                    this.OnGVCallbackTypeChanging(value);
                    this.RaiseDataMemberChanging("GVCallbackType");
                    this.ValidateProperty("GVCallbackType", value);
                    this._gvCallbackType = value;
                    this.RaiseDataMemberChanged("GVCallbackType");
                    this.OnGVCallbackTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public string ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Inserted"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Inserted
        {
            get
            {
                return this._inserted;
            }
            set
            {
                if ((this._inserted != value))
                {
                    this.OnInsertedChanging(value);
                    this.RaiseDataMemberChanging("Inserted");
                    this.ValidateProperty("Inserted", value);
                    this._inserted = value;
                    this.RaiseDataMemberChanged("Inserted");
                    this.OnInsertedChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "IsReadOnly"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public bool IsReadOnly
        {
            get
            {
                return this._isReadOnly;
            }
            set
            {
                if ((this._isReadOnly != value))
                {
                    this.OnIsReadOnlyChanging(value);
                    this.RaiseDataMemberChanging("IsReadOnly");
                    this.ValidateProperty("IsReadOnly", value);
                    this._isReadOnly = value;
                    this.RaiseDataMemberChanged("IsReadOnly");
                    this.OnIsReadOnlyChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "LastUpdate"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string LastUpdate
        {
            get
            {
                return this._lastUpdate;
            }
            set
            {
                if ((this._lastUpdate != value))
                {
                    this.OnLastUpdateChanging(value);
                    this.RaiseDataMemberChanging("LastUpdate");
                    this.ValidateProperty("LastUpdate", value);
                    this._lastUpdate = value;
                    this.RaiseDataMemberChanged("LastUpdate");
                    this.OnLastUpdateChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Owner"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required(ErrorMessage="An owner must be specified for the SIP provider.")]
        public string Owner
        {
            get
            {
                return this._owner;
            }
            set
            {
                if ((this._owner != value))
                {
                    this.OnOwnerChanging(value);
                    this.RaiseDataMemberChanging("Owner");
                    this.ValidateProperty("Owner", value);
                    this._owner = value;
                    this.RaiseDataMemberChanged("Owner");
                    this.OnOwnerChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ProviderAuthUsername"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string ProviderAuthUsername
        {
            get
            {
                return this._providerAuthUsername;
            }
            set
            {
                if ((this._providerAuthUsername != value))
                {
                    this.OnProviderAuthUsernameChanging(value);
                    this.RaiseDataMemberChanging("ProviderAuthUsername");
                    this.ValidateProperty("ProviderAuthUsername", value);
                    this._providerAuthUsername = value;
                    this.RaiseDataMemberChanged("ProviderAuthUsername");
                    this.OnProviderAuthUsernameChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ProviderFrom"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string ProviderFrom
        {
            get
            {
                return this._providerFrom;
            }
            set
            {
                if ((this._providerFrom != value))
                {
                    this.OnProviderFromChanging(value);
                    this.RaiseDataMemberChanging("ProviderFrom");
                    this.ValidateProperty("ProviderFrom", value);
                    this._providerFrom = value;
                    this.RaiseDataMemberChanged("ProviderFrom");
                    this.OnProviderFromChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ProviderName"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [RegularExpression("[^\\.]+", ErrorMessage="Provider names cannot contain a full stop \'.\' in order to avoid ambiguity with DN" +
            "S host names, please remove the \'.\'.")]
        [Required(ErrorMessage="A provider name must be specified.")]
        public string ProviderName
        {
            get
            {
                return this._providerName;
            }
            set
            {
                if ((this._providerName != value))
                {
                    this.OnProviderNameChanging(value);
                    this.RaiseDataMemberChanging("ProviderName");
                    this.ValidateProperty("ProviderName", value);
                    this._providerName = value;
                    this.RaiseDataMemberChanged("ProviderName");
                    this.OnProviderNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ProviderOutboundProxy"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string ProviderOutboundProxy
        {
            get
            {
                return this._providerOutboundProxy;
            }
            set
            {
                if ((this._providerOutboundProxy != value))
                {
                    this.OnProviderOutboundProxyChanging(value);
                    this.RaiseDataMemberChanging("ProviderOutboundProxy");
                    this.ValidateProperty("ProviderOutboundProxy", value);
                    this._providerOutboundProxy = value;
                    this.RaiseDataMemberChanged("ProviderOutboundProxy");
                    this.OnProviderOutboundProxyChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ProviderPassword"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string ProviderPassword
        {
            get
            {
                return this._providerPassword;
            }
            set
            {
                if ((this._providerPassword != value))
                {
                    this.OnProviderPasswordChanging(value);
                    this.RaiseDataMemberChanging("ProviderPassword");
                    this.ValidateProperty("ProviderPassword", value);
                    this._providerPassword = value;
                    this.RaiseDataMemberChanged("ProviderPassword");
                    this.OnProviderPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ProviderServer"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [RegularExpression(".+\\..+", ErrorMessage="The provider server should contain at least one \'.\' to be recognised as a valid h" +
            "ostname or IP address.")]
        public string ProviderServer
        {
            get
            {
                return this._providerServer;
            }
            set
            {
                if ((this._providerServer != value))
                {
                    this.OnProviderServerChanging(value);
                    this.RaiseDataMemberChanging("ProviderServer");
                    this.ValidateProperty("ProviderServer", value);
                    this._providerServer = value;
                    this.RaiseDataMemberChanged("ProviderServer");
                    this.OnProviderServerChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ProviderType"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string ProviderType
        {
            get
            {
                return this._providerType;
            }
            set
            {
                if ((this._providerType != value))
                {
                    this.OnProviderTypeChanging(value);
                    this.RaiseDataMemberChanging("ProviderType");
                    this.ValidateProperty("ProviderType", value);
                    this._providerType = value;
                    this.RaiseDataMemberChanged("ProviderType");
                    this.OnProviderTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ProviderUsername"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required(ErrorMessage="A username must be specified for the provider.")]
        public string ProviderUsername
        {
            get
            {
                return this._providerUsername;
            }
            set
            {
                if ((this._providerUsername != value))
                {
                    this.OnProviderUsernameChanging(value);
                    this.RaiseDataMemberChanging("ProviderUsername");
                    this.ValidateProperty("ProviderUsername", value);
                    this._providerUsername = value;
                    this.RaiseDataMemberChanged("ProviderUsername");
                    this.OnProviderUsernameChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "RegisterAdminEnabled"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public bool RegisterAdminEnabled
        {
            get
            {
                return this._registerAdminEnabled;
            }
            set
            {
                if ((this._registerAdminEnabled != value))
                {
                    this.OnRegisterAdminEnabledChanging(value);
                    this.RaiseDataMemberChanging("RegisterAdminEnabled");
                    this.ValidateProperty("RegisterAdminEnabled", value);
                    this._registerAdminEnabled = value;
                    this.RaiseDataMemberChanged("RegisterAdminEnabled");
                    this.OnRegisterAdminEnabledChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "RegisterContact"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [RegularExpression(".+@.+\\..+", ErrorMessage="The register contact should be of the form user@server.com.")]
        public string RegisterContact
        {
            get
            {
                return this._registerContact;
            }
            set
            {
                if ((this._registerContact != value))
                {
                    this.OnRegisterContactChanging(value);
                    this.RaiseDataMemberChanging("RegisterContact");
                    this.ValidateProperty("RegisterContact", value);
                    this._registerContact = value;
                    this.RaiseDataMemberChanged("RegisterContact");
                    this.OnRegisterContactChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "RegisterDisabledReason"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string RegisterDisabledReason
        {
            get
            {
                return this._registerDisabledReason;
            }
            set
            {
                if ((this._registerDisabledReason != value))
                {
                    this.OnRegisterDisabledReasonChanging(value);
                    this.RaiseDataMemberChanging("RegisterDisabledReason");
                    this.ValidateProperty("RegisterDisabledReason", value);
                    this._registerDisabledReason = value;
                    this.RaiseDataMemberChanged("RegisterDisabledReason");
                    this.OnRegisterDisabledReasonChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "RegisterEnabled"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public bool RegisterEnabled
        {
            get
            {
                return this._registerEnabled;
            }
            set
            {
                if ((this._registerEnabled != value))
                {
                    this.OnRegisterEnabledChanging(value);
                    this.RaiseDataMemberChanging("RegisterEnabled");
                    this.ValidateProperty("RegisterEnabled", value);
                    this._registerEnabled = value;
                    this.RaiseDataMemberChanged("RegisterEnabled");
                    this.OnRegisterEnabledChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "RegisterExpiry"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public Nullable<int> RegisterExpiry
        {
            get
            {
                return this._registerExpiry;
            }
            set
            {
                if ((this._registerExpiry != value))
                {
                    this.OnRegisterExpiryChanging(value);
                    this.RaiseDataMemberChanging("RegisterExpiry");
                    this.ValidateProperty("RegisterExpiry", value);
                    this._registerExpiry = value;
                    this.RaiseDataMemberChanged("RegisterExpiry");
                    this.OnRegisterExpiryChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "RegisterRealm"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string RegisterRealm
        {
            get
            {
                return this._registerRealm;
            }
            set
            {
                if ((this._registerRealm != value))
                {
                    this.OnRegisterRealmChanging(value);
                    this.RaiseDataMemberChanging("RegisterRealm");
                    this.ValidateProperty("RegisterRealm", value);
                    this._registerRealm = value;
                    this.RaiseDataMemberChanged("RegisterRealm");
                    this.OnRegisterRealmChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "RegisterServer"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [RegularExpression(".+\\..+", ErrorMessage="The register server should contain at least one \'.\' to be recognised as a valid h" +
            "ostname or IP address.")]
        public string RegisterServer
        {
            get
            {
                return this._registerServer;
            }
            set
            {
                if ((this._registerServer != value))
                {
                    this.OnRegisterServerChanging(value);
                    this.RaiseDataMemberChanging("RegisterServer");
                    this.ValidateProperty("RegisterServer", value);
                    this._registerServer = value;
                    this.RaiseDataMemberChanged("RegisterServer");
                    this.OnRegisterServerChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "SendMWISubscribe"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public bool SendMWISubscribe
        {
            get
            {
                return this._sendMWISubscribe;
            }
            set
            {
                if ((this._sendMWISubscribe != value))
                {
                    this.OnSendMWISubscribeChanging(value);
                    this.RaiseDataMemberChanging("SendMWISubscribe");
                    this.ValidateProperty("SendMWISubscribe", value);
                    this._sendMWISubscribe = value;
                    this.RaiseDataMemberChanged("SendMWISubscribe");
                    this.OnSendMWISubscribeChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft die Auflistung der zugeordneten <see cref="SIPProviderBinding"/>-Entitätsinstanzen ab.
        /// </summary>
        [Association("SIPProvider_SIPProviderBinding", "ID", "ProviderID")]
        [XmlIgnore()]
        public EntityCollection<SIPProviderBinding> sipproviderbindings
        {
            get
            {
                if ((this._sipproviderbindings == null))
                {
                    this._sipproviderbindings = new EntityCollection<SIPProviderBinding>(this, "sipproviderbindings", this.Filtersipproviderbindings, this.Attachsipproviderbindings, this.Detachsipproviderbindings);
                }
                return this._sipproviderbindings;
            }
        }
        
        private void Attachsipproviderbindings(SIPProviderBinding entity)
        {
            entity.sipprovider = this;
        }
        
        private void Detachsipproviderbindings(SIPProviderBinding entity)
        {
            entity.sipprovider = null;
        }
        
        private bool Filtersipproviderbindings(SIPProviderBinding entity)
        {
            return (entity.ProviderID == this.ID);
        }
        
        /// <summary>
        /// Berechnet einen Wert aus den Schlüsselfeldern, der diese Entitätsinstanz eindeutig identifiziert.
        /// </summary>
        /// <returns>Eine Objektinstanz, die diese Entitätsinstanz eindeutig identifiziert.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// Die "SIPProviderBinding"-Entitätsklasse.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SIPSorcery.Entities")]
    public sealed partial class SIPProviderBinding : Entity
    {
        
        private string _adminMemberID;
        
        private int _bindingExpiry;
        
        private string _bindingURI;
        
        private int _cSeq;
        
        private string _id;
        
        private bool _isRegistered;
        
        private string _lastRegisterAttempt;
        
        private string _lastRegisterTime;
        
        private string _nextRegistrationTime;
        
        private string _owner;
        
        private string _providerID;
        
        private string _providerName;
        
        private string _registrarSIPSocket;
        
        private string _registrationFailureMessage;
        
        private EntityRef<SIPProvider> _sipprovider;
        
        #region Definitionen der Extensibility-Methode

        /// <summary>
        /// Diese Methode wird nach Abschluss der Initialisierung vom Konstruktor aufgerufen
        /// und kann für das weitere Objektsetup verwendet werden.
        /// </summary>
        partial void OnCreated();
        partial void OnAdminMemberIDChanging(string value);
        partial void OnAdminMemberIDChanged();
        partial void OnBindingExpiryChanging(int value);
        partial void OnBindingExpiryChanged();
        partial void OnBindingURIChanging(string value);
        partial void OnBindingURIChanged();
        partial void OnCSeqChanging(int value);
        partial void OnCSeqChanged();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnIsRegisteredChanging(bool value);
        partial void OnIsRegisteredChanged();
        partial void OnLastRegisterAttemptChanging(string value);
        partial void OnLastRegisterAttemptChanged();
        partial void OnLastRegisterTimeChanging(string value);
        partial void OnLastRegisterTimeChanged();
        partial void OnNextRegistrationTimeChanging(string value);
        partial void OnNextRegistrationTimeChanged();
        partial void OnOwnerChanging(string value);
        partial void OnOwnerChanged();
        partial void OnProviderIDChanging(string value);
        partial void OnProviderIDChanged();
        partial void OnProviderNameChanging(string value);
        partial void OnProviderNameChanged();
        partial void OnRegistrarSIPSocketChanging(string value);
        partial void OnRegistrarSIPSocketChanged();
        partial void OnRegistrationFailureMessageChanging(string value);
        partial void OnRegistrationFailureMessageChanged();

        #endregion
        
        
        /// <summary>
        /// Initialisiert eine neue Instanz der <see cref="SIPProviderBinding"/>-Klasse.
        /// </summary>
        public SIPProviderBinding()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Ruft den "AdminMemberID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string AdminMemberID
        {
            get
            {
                return this._adminMemberID;
            }
            set
            {
                if ((this._adminMemberID != value))
                {
                    this.OnAdminMemberIDChanging(value);
                    this.RaiseDataMemberChanging("AdminMemberID");
                    this.ValidateProperty("AdminMemberID", value);
                    this._adminMemberID = value;
                    this.RaiseDataMemberChanged("AdminMemberID");
                    this.OnAdminMemberIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "BindingExpiry"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public int BindingExpiry
        {
            get
            {
                return this._bindingExpiry;
            }
            set
            {
                if ((this._bindingExpiry != value))
                {
                    this.OnBindingExpiryChanging(value);
                    this.RaiseDataMemberChanging("BindingExpiry");
                    this.ValidateProperty("BindingExpiry", value);
                    this._bindingExpiry = value;
                    this.RaiseDataMemberChanged("BindingExpiry");
                    this.OnBindingExpiryChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "BindingURI"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string BindingURI
        {
            get
            {
                return this._bindingURI;
            }
            set
            {
                if ((this._bindingURI != value))
                {
                    this.OnBindingURIChanging(value);
                    this.RaiseDataMemberChanging("BindingURI");
                    this.ValidateProperty("BindingURI", value);
                    this._bindingURI = value;
                    this.RaiseDataMemberChanged("BindingURI");
                    this.OnBindingURIChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "CSeq"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public int CSeq
        {
            get
            {
                return this._cSeq;
            }
            set
            {
                if ((this._cSeq != value))
                {
                    this.OnCSeqChanging(value);
                    this.RaiseDataMemberChanging("CSeq");
                    this.ValidateProperty("CSeq", value);
                    this._cSeq = value;
                    this.RaiseDataMemberChanged("CSeq");
                    this.OnCSeqChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public string ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "IsRegistered"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public bool IsRegistered
        {
            get
            {
                return this._isRegistered;
            }
            set
            {
                if ((this._isRegistered != value))
                {
                    this.OnIsRegisteredChanging(value);
                    this.RaiseDataMemberChanging("IsRegistered");
                    this.ValidateProperty("IsRegistered", value);
                    this._isRegistered = value;
                    this.RaiseDataMemberChanged("IsRegistered");
                    this.OnIsRegisteredChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "LastRegisterAttempt"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string LastRegisterAttempt
        {
            get
            {
                return this._lastRegisterAttempt;
            }
            set
            {
                if ((this._lastRegisterAttempt != value))
                {
                    this.OnLastRegisterAttemptChanging(value);
                    this.RaiseDataMemberChanging("LastRegisterAttempt");
                    this.ValidateProperty("LastRegisterAttempt", value);
                    this._lastRegisterAttempt = value;
                    this.RaiseDataMemberChanged("LastRegisterAttempt");
                    this.OnLastRegisterAttemptChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "LastRegisterTime"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string LastRegisterTime
        {
            get
            {
                return this._lastRegisterTime;
            }
            set
            {
                if ((this._lastRegisterTime != value))
                {
                    this.OnLastRegisterTimeChanging(value);
                    this.RaiseDataMemberChanging("LastRegisterTime");
                    this.ValidateProperty("LastRegisterTime", value);
                    this._lastRegisterTime = value;
                    this.RaiseDataMemberChanged("LastRegisterTime");
                    this.OnLastRegisterTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "NextRegistrationTime"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string NextRegistrationTime
        {
            get
            {
                return this._nextRegistrationTime;
            }
            set
            {
                if ((this._nextRegistrationTime != value))
                {
                    this.OnNextRegistrationTimeChanging(value);
                    this.RaiseDataMemberChanging("NextRegistrationTime");
                    this.ValidateProperty("NextRegistrationTime", value);
                    this._nextRegistrationTime = value;
                    this.RaiseDataMemberChanged("NextRegistrationTime");
                    this.OnNextRegistrationTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Owner"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Owner
        {
            get
            {
                return this._owner;
            }
            set
            {
                if ((this._owner != value))
                {
                    this.OnOwnerChanging(value);
                    this.RaiseDataMemberChanging("Owner");
                    this.ValidateProperty("Owner", value);
                    this._owner = value;
                    this.RaiseDataMemberChanged("Owner");
                    this.OnOwnerChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ProviderID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        public string ProviderID
        {
            get
            {
                return this._providerID;
            }
            set
            {
                if ((this._providerID != value))
                {
                    this.OnProviderIDChanging(value);
                    this.RaiseDataMemberChanging("ProviderID");
                    this.ValidateProperty("ProviderID", value);
                    this._providerID = value;
                    this.RaiseDataMemberChanged("ProviderID");
                    this.OnProviderIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ProviderName"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string ProviderName
        {
            get
            {
                return this._providerName;
            }
            set
            {
                if ((this._providerName != value))
                {
                    this.OnProviderNameChanging(value);
                    this.RaiseDataMemberChanging("ProviderName");
                    this.ValidateProperty("ProviderName", value);
                    this._providerName = value;
                    this.RaiseDataMemberChanged("ProviderName");
                    this.OnProviderNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "RegistrarSIPSocket"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string RegistrarSIPSocket
        {
            get
            {
                return this._registrarSIPSocket;
            }
            set
            {
                if ((this._registrarSIPSocket != value))
                {
                    this.OnRegistrarSIPSocketChanging(value);
                    this.RaiseDataMemberChanging("RegistrarSIPSocket");
                    this.ValidateProperty("RegistrarSIPSocket", value);
                    this._registrarSIPSocket = value;
                    this.RaiseDataMemberChanged("RegistrarSIPSocket");
                    this.OnRegistrarSIPSocketChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "RegistrationFailureMessage"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string RegistrationFailureMessage
        {
            get
            {
                return this._registrationFailureMessage;
            }
            set
            {
                if ((this._registrationFailureMessage != value))
                {
                    this.OnRegistrationFailureMessageChanging(value);
                    this.RaiseDataMemberChanging("RegistrationFailureMessage");
                    this.ValidateProperty("RegistrationFailureMessage", value);
                    this._registrationFailureMessage = value;
                    this.RaiseDataMemberChanged("RegistrationFailureMessage");
                    this.OnRegistrationFailureMessageChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft die zugeordnete <see cref="SIPProvider"/>-Entität ab oder legt sie fest.
        /// </summary>
        [Association("SIPProvider_SIPProviderBinding", "ProviderID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public SIPProvider sipprovider
        {
            get
            {
                if ((this._sipprovider == null))
                {
                    this._sipprovider = new EntityRef<SIPProvider>(this, "sipprovider", this.Filtersipprovider);
                }
                return this._sipprovider.Entity;
            }
            set
            {
                SIPProvider previous = this.sipprovider;
                if ((previous != value))
                {
                    this.ValidateProperty("sipprovider", value);
                    if ((previous != null))
                    {
                        this._sipprovider.Entity = null;
                        previous.sipproviderbindings.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ProviderID = value.ID;
                    }
                    else
                    {
                        this.ProviderID = default(string);
                    }
                    this._sipprovider.Entity = value;
                    if ((value != null))
                    {
                        value.sipproviderbindings.Add(this);
                    }
                    this.RaisePropertyChanged("sipprovider");
                }
            }
        }
        
        private bool Filtersipprovider(SIPProvider entity)
        {
            return (entity.ID == this.ProviderID);
        }
        
        /// <summary>
        /// Berechnet einen Wert aus den Schlüsselfeldern, der diese Entitätsinstanz eindeutig identifiziert.
        /// </summary>
        /// <returns>Eine Objektinstanz, die diese Entitätsinstanz eindeutig identifiziert.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// Die "SIPRegistrarBinding"-Entitätsklasse.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SIPSorcery.Entities")]
    public sealed partial class SIPRegistrarBinding : Entity
    {
        
        private string _adminMemberID;
        
        private string _contactURI;
        
        private int _expiry;
        
        private string _expiryTime;
        
        private string _id;
        
        private string _lastUpdate;
        
        private string _mangledContactURI;
        
        private string _owner;
        
        private string _proxySIPSocket;
        
        private string _registrarSIPSocket;
        
        private string _remoteSIPSocket;
        
        private EntityRef<SIPAccount> _sipaccount;
        
        private string _sipAccountID;
        
        private string _sipAccountName;
        
        private string _userAgent;
        
        #region Definitionen der Extensibility-Methode

        /// <summary>
        /// Diese Methode wird nach Abschluss der Initialisierung vom Konstruktor aufgerufen
        /// und kann für das weitere Objektsetup verwendet werden.
        /// </summary>
        partial void OnCreated();
        partial void OnAdminMemberIDChanging(string value);
        partial void OnAdminMemberIDChanged();
        partial void OnContactURIChanging(string value);
        partial void OnContactURIChanged();
        partial void OnExpiryChanging(int value);
        partial void OnExpiryChanged();
        partial void OnExpiryTimeChanging(string value);
        partial void OnExpiryTimeChanged();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnLastUpdateChanging(string value);
        partial void OnLastUpdateChanged();
        partial void OnMangledContactURIChanging(string value);
        partial void OnMangledContactURIChanged();
        partial void OnOwnerChanging(string value);
        partial void OnOwnerChanged();
        partial void OnProxySIPSocketChanging(string value);
        partial void OnProxySIPSocketChanged();
        partial void OnRegistrarSIPSocketChanging(string value);
        partial void OnRegistrarSIPSocketChanged();
        partial void OnRemoteSIPSocketChanging(string value);
        partial void OnRemoteSIPSocketChanged();
        partial void OnSIPAccountIDChanging(string value);
        partial void OnSIPAccountIDChanged();
        partial void OnSIPAccountNameChanging(string value);
        partial void OnSIPAccountNameChanged();
        partial void OnUserAgentChanging(string value);
        partial void OnUserAgentChanged();

        #endregion
        
        
        /// <summary>
        /// Initialisiert eine neue Instanz der <see cref="SIPRegistrarBinding"/>-Klasse.
        /// </summary>
        public SIPRegistrarBinding()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Ruft den "AdminMemberID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string AdminMemberID
        {
            get
            {
                return this._adminMemberID;
            }
            set
            {
                if ((this._adminMemberID != value))
                {
                    this.OnAdminMemberIDChanging(value);
                    this.RaiseDataMemberChanging("AdminMemberID");
                    this.ValidateProperty("AdminMemberID", value);
                    this._adminMemberID = value;
                    this.RaiseDataMemberChanged("AdminMemberID");
                    this.OnAdminMemberIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ContactURI"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string ContactURI
        {
            get
            {
                return this._contactURI;
            }
            set
            {
                if ((this._contactURI != value))
                {
                    this.OnContactURIChanging(value);
                    this.RaiseDataMemberChanging("ContactURI");
                    this.ValidateProperty("ContactURI", value);
                    this._contactURI = value;
                    this.RaiseDataMemberChanged("ContactURI");
                    this.OnContactURIChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Expiry"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public int Expiry
        {
            get
            {
                return this._expiry;
            }
            set
            {
                if ((this._expiry != value))
                {
                    this.OnExpiryChanging(value);
                    this.RaiseDataMemberChanging("Expiry");
                    this.ValidateProperty("Expiry", value);
                    this._expiry = value;
                    this.RaiseDataMemberChanged("Expiry");
                    this.OnExpiryChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ExpiryTime"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string ExpiryTime
        {
            get
            {
                return this._expiryTime;
            }
            set
            {
                if ((this._expiryTime != value))
                {
                    this.OnExpiryTimeChanging(value);
                    this.RaiseDataMemberChanging("ExpiryTime");
                    this.ValidateProperty("ExpiryTime", value);
                    this._expiryTime = value;
                    this.RaiseDataMemberChanged("ExpiryTime");
                    this.OnExpiryTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public string ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "LastUpdate"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string LastUpdate
        {
            get
            {
                return this._lastUpdate;
            }
            set
            {
                if ((this._lastUpdate != value))
                {
                    this.OnLastUpdateChanging(value);
                    this.RaiseDataMemberChanging("LastUpdate");
                    this.ValidateProperty("LastUpdate", value);
                    this._lastUpdate = value;
                    this.RaiseDataMemberChanged("LastUpdate");
                    this.OnLastUpdateChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "MangledContactURI"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string MangledContactURI
        {
            get
            {
                return this._mangledContactURI;
            }
            set
            {
                if ((this._mangledContactURI != value))
                {
                    this.OnMangledContactURIChanging(value);
                    this.RaiseDataMemberChanging("MangledContactURI");
                    this.ValidateProperty("MangledContactURI", value);
                    this._mangledContactURI = value;
                    this.RaiseDataMemberChanged("MangledContactURI");
                    this.OnMangledContactURIChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Owner"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Owner
        {
            get
            {
                return this._owner;
            }
            set
            {
                if ((this._owner != value))
                {
                    this.OnOwnerChanging(value);
                    this.RaiseDataMemberChanging("Owner");
                    this.ValidateProperty("Owner", value);
                    this._owner = value;
                    this.RaiseDataMemberChanged("Owner");
                    this.OnOwnerChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "ProxySIPSocket"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string ProxySIPSocket
        {
            get
            {
                return this._proxySIPSocket;
            }
            set
            {
                if ((this._proxySIPSocket != value))
                {
                    this.OnProxySIPSocketChanging(value);
                    this.RaiseDataMemberChanging("ProxySIPSocket");
                    this.ValidateProperty("ProxySIPSocket", value);
                    this._proxySIPSocket = value;
                    this.RaiseDataMemberChanged("ProxySIPSocket");
                    this.OnProxySIPSocketChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "RegistrarSIPSocket"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string RegistrarSIPSocket
        {
            get
            {
                return this._registrarSIPSocket;
            }
            set
            {
                if ((this._registrarSIPSocket != value))
                {
                    this.OnRegistrarSIPSocketChanging(value);
                    this.RaiseDataMemberChanging("RegistrarSIPSocket");
                    this.ValidateProperty("RegistrarSIPSocket", value);
                    this._registrarSIPSocket = value;
                    this.RaiseDataMemberChanged("RegistrarSIPSocket");
                    this.OnRegistrarSIPSocketChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "RemoteSIPSocket"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string RemoteSIPSocket
        {
            get
            {
                return this._remoteSIPSocket;
            }
            set
            {
                if ((this._remoteSIPSocket != value))
                {
                    this.OnRemoteSIPSocketChanging(value);
                    this.RaiseDataMemberChanging("RemoteSIPSocket");
                    this.ValidateProperty("RemoteSIPSocket", value);
                    this._remoteSIPSocket = value;
                    this.RaiseDataMemberChanged("RemoteSIPSocket");
                    this.OnRemoteSIPSocketChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft die zugeordnete <see cref="SIPAccount"/>-Entität ab oder legt sie fest.
        /// </summary>
        [Association("SIPAccount_SIPRegistrarBinding", "SIPAccountID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public SIPAccount sipaccount
        {
            get
            {
                if ((this._sipaccount == null))
                {
                    this._sipaccount = new EntityRef<SIPAccount>(this, "sipaccount", this.Filtersipaccount);
                }
                return this._sipaccount.Entity;
            }
            set
            {
                SIPAccount previous = this.sipaccount;
                if ((previous != value))
                {
                    this.ValidateProperty("sipaccount", value);
                    if ((previous != null))
                    {
                        this._sipaccount.Entity = null;
                        previous.sipregistrarbindings.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SIPAccountID = value.ID;
                    }
                    else
                    {
                        this.SIPAccountID = default(string);
                    }
                    this._sipaccount.Entity = value;
                    if ((value != null))
                    {
                        value.sipregistrarbindings.Add(this);
                    }
                    this.RaisePropertyChanged("sipaccount");
                }
            }
        }
        
        /// <summary>
        /// Ruft den "SIPAccountID"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        public string SIPAccountID
        {
            get
            {
                return this._sipAccountID;
            }
            set
            {
                if ((this._sipAccountID != value))
                {
                    this.OnSIPAccountIDChanging(value);
                    this.RaiseDataMemberChanging("SIPAccountID");
                    this.ValidateProperty("SIPAccountID", value);
                    this._sipAccountID = value;
                    this.RaiseDataMemberChanged("SIPAccountID");
                    this.OnSIPAccountIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "SIPAccountName"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Required()]
        public string SIPAccountName
        {
            get
            {
                return this._sipAccountName;
            }
            set
            {
                if ((this._sipAccountName != value))
                {
                    this.OnSIPAccountNameChanging(value);
                    this.RaiseDataMemberChanging("SIPAccountName");
                    this.ValidateProperty("SIPAccountName", value);
                    this._sipAccountName = value;
                    this.RaiseDataMemberChanged("SIPAccountName");
                    this.OnSIPAccountNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Ruft den "UserAgent"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        public string UserAgent
        {
            get
            {
                return this._userAgent;
            }
            set
            {
                if ((this._userAgent != value))
                {
                    this.OnUserAgentChanging(value);
                    this.RaiseDataMemberChanging("UserAgent");
                    this.ValidateProperty("UserAgent", value);
                    this._userAgent = value;
                    this.RaiseDataMemberChanged("UserAgent");
                    this.OnUserAgentChanged();
                }
            }
        }
        
        private bool Filtersipaccount(SIPAccount entity)
        {
            return (entity.ID == this.SIPAccountID);
        }
        
        /// <summary>
        /// Berechnet einen Wert aus den Schlüsselfeldern, der diese Entitätsinstanz eindeutig identifiziert.
        /// </summary>
        /// <returns>Eine Objektinstanz, die diese Entitätsinstanz eindeutig identifiziert.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
}
namespace SIPSorcery.Entities.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using SIPSorcery.Entities;
    
    
    /// <summary>
    /// Der dem DomainService "SIPEntitiesDomainService" entsprechende DomainContext.
    /// </summary>
    public sealed partial class SIPEntitiesDomainContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Definitionen der Extensibility-Methode

        /// <summary>
        /// Diese Methode wird nach Abschluss der Initialisierung vom Konstruktor aufgerufen
        /// und kann für das weitere Objektsetup verwendet werden.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initialisiert eine neue Instanz der <see cref="SIPEntitiesDomainContext"/>-Klasse.
        /// </summary>
        public SIPEntitiesDomainContext() : 
                this(new WebDomainClient<ISIPEntitiesDomainServiceContract>(new Uri("SIPSorcery-Entities-Services-SIPEntitiesDomainService.svc", UriKind.Relative), true))
        {
        }
        
        /// <summary>
        /// Initialisiert eine neue Instanz der <see cref="SIPEntitiesDomainContext"/>-Klasse mit dem angegebenen Dienst-URI.
        /// </summary>
        /// <param name="serviceUri">Der SIPEntitiesDomainService-Dienst-URI.</param>
        public SIPEntitiesDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<ISIPEntitiesDomainServiceContract>(serviceUri, true))
        {
        }
        
        /// <summary>
        /// Initialisiert eine neue Instanz der <see cref="SIPEntitiesDomainContext"/>-Klasse mit dem angegebenen <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Die DomainClient-Instanz, die für diesen DomainContext verwendet wird.</param>
        public SIPEntitiesDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Ruft die Gruppe von <see cref="CDR"/>-Entitätsinstanzen ab, die in diese <see cref="SIPEntitiesDomainContext"/>-Instanz geladen wurden.
        /// </summary>
        public EntitySet<CDR> CDRs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CDR>();
            }
        }
        
        /// <summary>
        /// Ruft die Gruppe von <see cref="Customer"/>-Entitätsinstanzen ab, die in diese <see cref="SIPEntitiesDomainContext"/>-Instanz geladen wurden.
        /// </summary>
        public EntitySet<Customer> Customers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Customer>();
            }
        }
        
        /// <summary>
        /// Ruft die Gruppe von <see cref="SimpleWizardRule"/>-Entitätsinstanzen ab, die in diese <see cref="SIPEntitiesDomainContext"/>-Instanz geladen wurden.
        /// </summary>
        public EntitySet<SimpleWizardRule> SimpleWizardRules
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SimpleWizardRule>();
            }
        }
        
        /// <summary>
        /// Ruft die Gruppe von <see cref="SIPAccount"/>-Entitätsinstanzen ab, die in diese <see cref="SIPEntitiesDomainContext"/>-Instanz geladen wurden.
        /// </summary>
        public EntitySet<SIPAccount> SIPAccounts
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SIPAccount>();
            }
        }
        
        /// <summary>
        /// Ruft die Gruppe von <see cref="SIPDialogue"/>-Entitätsinstanzen ab, die in diese <see cref="SIPEntitiesDomainContext"/>-Instanz geladen wurden.
        /// </summary>
        public EntitySet<SIPDialogue> SIPDialogues
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SIPDialogue>();
            }
        }
        
        /// <summary>
        /// Ruft die Gruppe von <see cref="SIPDialplanLookup"/>-Entitätsinstanzen ab, die in diese <see cref="SIPEntitiesDomainContext"/>-Instanz geladen wurden.
        /// </summary>
        public EntitySet<SIPDialplanLookup> SIPDialplanLookups
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SIPDialplanLookup>();
            }
        }
        
        /// <summary>
        /// Ruft die Gruppe von <see cref="SIPDialplanOption"/>-Entitätsinstanzen ab, die in diese <see cref="SIPEntitiesDomainContext"/>-Instanz geladen wurden.
        /// </summary>
        public EntitySet<SIPDialplanOption> SIPDialplanOptions
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SIPDialplanOption>();
            }
        }
        
        /// <summary>
        /// Ruft die Gruppe von <see cref="SIPDialplanProvider"/>-Entitätsinstanzen ab, die in diese <see cref="SIPEntitiesDomainContext"/>-Instanz geladen wurden.
        /// </summary>
        public EntitySet<SIPDialplanProvider> SIPDialplanProviders
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SIPDialplanProvider>();
            }
        }
        
        /// <summary>
        /// Ruft die Gruppe von <see cref="SIPDialplanRoute"/>-Entitätsinstanzen ab, die in diese <see cref="SIPEntitiesDomainContext"/>-Instanz geladen wurden.
        /// </summary>
        public EntitySet<SIPDialplanRoute> SIPDialplanRoutes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SIPDialplanRoute>();
            }
        }
        
        /// <summary>
        /// Ruft die Gruppe von <see cref="SIPDialPlan"/>-Entitätsinstanzen ab, die in diese <see cref="SIPEntitiesDomainContext"/>-Instanz geladen wurden.
        /// </summary>
        public EntitySet<SIPDialPlan> SIPDialPlans
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SIPDialPlan>();
            }
        }
        
        /// <summary>
        /// Ruft die Gruppe von <see cref="SIPDomain"/>-Entitätsinstanzen ab, die in diese <see cref="SIPEntitiesDomainContext"/>-Instanz geladen wurden.
        /// </summary>
        public EntitySet<SIPDomain> SIPDomains
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SIPDomain>();
            }
        }
        
        /// <summary>
        /// Ruft die Gruppe von <see cref="SIPProviderBinding"/>-Entitätsinstanzen ab, die in diese <see cref="SIPEntitiesDomainContext"/>-Instanz geladen wurden.
        /// </summary>
        public EntitySet<SIPProviderBinding> SIPProviderBindings
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SIPProviderBinding>();
            }
        }
        
        /// <summary>
        /// Ruft die Gruppe von <see cref="SIPProvider"/>-Entitätsinstanzen ab, die in diese <see cref="SIPEntitiesDomainContext"/>-Instanz geladen wurden.
        /// </summary>
        public EntitySet<SIPProvider> SIPProviders
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SIPProvider>();
            }
        }
        
        /// <summary>
        /// Ruft die Gruppe von <see cref="SIPRegistrarBinding"/>-Entitätsinstanzen ab, die in diese <see cref="SIPEntitiesDomainContext"/>-Instanz geladen wurden.
        /// </summary>
        public EntitySet<SIPRegistrarBinding> SIPRegistrarBindings
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SIPRegistrarBinding>();
            }
        }
        
        /// <summary>
        /// Ruft die Gruppe von <see cref="User"/>-Entitätsinstanzen ab, die in diese <see cref="SIPEntitiesDomainContext"/>-Instanz geladen wurden.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Ruft eine EntityQuery-Instanz ab, die verwendet werden kann, um <see cref="CDR"/>-Entitätsinstanzen mithilfe der "GetCDRs"-Abfrage zu laden.
        /// </summary>
        /// <returns>Eine EntityQuery, die geladen werden kann, um die <see cref="CDR"/>-Entitätsinstanzen abzurufen.</returns>
        public EntityQuery<CDR> GetCDRsQuery()
        {
            this.ValidateMethod("GetCDRsQuery", null);
            return base.CreateQuery<CDR>("GetCDRs", null, false, true);
        }
        
        /// <summary>
        /// Ruft eine EntityQuery-Instanz ab, die verwendet werden kann, um <see cref="Customer"/>-Entitätsinstanzen mithilfe der "GetCustomer"-Abfrage zu laden.
        /// </summary>
        /// <returns>Eine EntityQuery, die geladen werden kann, um die <see cref="Customer"/>-Entitätsinstanzen abzurufen.</returns>
        public EntityQuery<Customer> GetCustomerQuery()
        {
            this.ValidateMethod("GetCustomerQuery", null);
            return base.CreateQuery<Customer>("GetCustomer", null, false, false);
        }
        
        /// <summary>
        /// Ruft eine EntityQuery-Instanz ab, die verwendet werden kann, um <see cref="SimpleWizardRule"/>-Entitätsinstanzen mithilfe der "GetSimpleWizardRules"-Abfrage zu laden.
        /// </summary>
        /// <returns>Eine EntityQuery, die geladen werden kann, um die <see cref="SimpleWizardRule"/>-Entitätsinstanzen abzurufen.</returns>
        public EntityQuery<SimpleWizardRule> GetSimpleWizardRulesQuery()
        {
            this.ValidateMethod("GetSimpleWizardRulesQuery", null);
            return base.CreateQuery<SimpleWizardRule>("GetSimpleWizardRules", null, false, true);
        }
        
        /// <summary>
        /// Ruft eine EntityQuery-Instanz ab, die verwendet werden kann, um <see cref="SIPAccount"/>-Entitätsinstanzen mithilfe der "GetSIPAccounts"-Abfrage zu laden.
        /// </summary>
        /// <returns>Eine EntityQuery, die geladen werden kann, um die <see cref="SIPAccount"/>-Entitätsinstanzen abzurufen.</returns>
        public EntityQuery<SIPAccount> GetSIPAccountsQuery()
        {
            this.ValidateMethod("GetSIPAccountsQuery", null);
            return base.CreateQuery<SIPAccount>("GetSIPAccounts", null, false, true);
        }
        
        /// <summary>
        /// Ruft eine EntityQuery-Instanz ab, die verwendet werden kann, um <see cref="SIPDialogue"/>-Entitätsinstanzen mithilfe der "GetSIPDialogues"-Abfrage zu laden.
        /// </summary>
        /// <returns>Eine EntityQuery, die geladen werden kann, um die <see cref="SIPDialogue"/>-Entitätsinstanzen abzurufen.</returns>
        public EntityQuery<SIPDialogue> GetSIPDialoguesQuery()
        {
            this.ValidateMethod("GetSIPDialoguesQuery", null);
            return base.CreateQuery<SIPDialogue>("GetSIPDialogues", null, false, true);
        }
        
        /// <summary>
        /// Ruft eine EntityQuery-Instanz ab, die verwendet werden kann, um <see cref="SIPDialplanLookup"/>-Entitätsinstanzen mithilfe der "GetSIPDialplanLookups"-Abfrage zu laden.
        /// </summary>
        /// <returns>Eine EntityQuery, die geladen werden kann, um die <see cref="SIPDialplanLookup"/>-Entitätsinstanzen abzurufen.</returns>
        public EntityQuery<SIPDialplanLookup> GetSIPDialplanLookupsQuery()
        {
            this.ValidateMethod("GetSIPDialplanLookupsQuery", null);
            return base.CreateQuery<SIPDialplanLookup>("GetSIPDialplanLookups", null, false, true);
        }
        
        /// <summary>
        /// Ruft eine EntityQuery-Instanz ab, die verwendet werden kann, um <see cref="SIPDialplanOption"/>-Entitätsinstanzen mithilfe der "GetSIPDialplanOptions"-Abfrage zu laden.
        /// </summary>
        /// <returns>Eine EntityQuery, die geladen werden kann, um die <see cref="SIPDialplanOption"/>-Entitätsinstanzen abzurufen.</returns>
        public EntityQuery<SIPDialplanOption> GetSIPDialplanOptionsQuery()
        {
            this.ValidateMethod("GetSIPDialplanOptionsQuery", null);
            return base.CreateQuery<SIPDialplanOption>("GetSIPDialplanOptions", null, false, true);
        }
        
        /// <summary>
        /// Ruft eine EntityQuery-Instanz ab, die verwendet werden kann, um <see cref="SIPDialplanProvider"/>-Entitätsinstanzen mithilfe der "GetSIPDialplanProviders"-Abfrage zu laden.
        /// </summary>
        /// <returns>Eine EntityQuery, die geladen werden kann, um die <see cref="SIPDialplanProvider"/>-Entitätsinstanzen abzurufen.</returns>
        public EntityQuery<SIPDialplanProvider> GetSIPDialplanProvidersQuery()
        {
            this.ValidateMethod("GetSIPDialplanProvidersQuery", null);
            return base.CreateQuery<SIPDialplanProvider>("GetSIPDialplanProviders", null, false, true);
        }
        
        /// <summary>
        /// Ruft eine EntityQuery-Instanz ab, die verwendet werden kann, um <see cref="SIPDialplanRoute"/>-Entitätsinstanzen mithilfe der "GetSIPDialplanRoutes"-Abfrage zu laden.
        /// </summary>
        /// <returns>Eine EntityQuery, die geladen werden kann, um die <see cref="SIPDialplanRoute"/>-Entitätsinstanzen abzurufen.</returns>
        public EntityQuery<SIPDialplanRoute> GetSIPDialplanRoutesQuery()
        {
            this.ValidateMethod("GetSIPDialplanRoutesQuery", null);
            return base.CreateQuery<SIPDialplanRoute>("GetSIPDialplanRoutes", null, false, true);
        }
        
        /// <summary>
        /// Ruft eine EntityQuery-Instanz ab, die verwendet werden kann, um <see cref="SIPDialPlan"/>-Entitätsinstanzen mithilfe der "GetSIPDialplans"-Abfrage zu laden.
        /// </summary>
        /// <returns>Eine EntityQuery, die geladen werden kann, um die <see cref="SIPDialPlan"/>-Entitätsinstanzen abzurufen.</returns>
        public EntityQuery<SIPDialPlan> GetSIPDialplansQuery()
        {
            this.ValidateMethod("GetSIPDialplansQuery", null);
            return base.CreateQuery<SIPDialPlan>("GetSIPDialplans", null, false, true);
        }
        
        /// <summary>
        /// Ruft eine EntityQuery-Instanz ab, die verwendet werden kann, um <see cref="SIPDomain"/>-Entitätsinstanzen mithilfe der "GetSIPDomains"-Abfrage zu laden.
        /// </summary>
        /// <returns>Eine EntityQuery, die geladen werden kann, um die <see cref="SIPDomain"/>-Entitätsinstanzen abzurufen.</returns>
        public EntityQuery<SIPDomain> GetSIPDomainsQuery()
        {
            this.ValidateMethod("GetSIPDomainsQuery", null);
            return base.CreateQuery<SIPDomain>("GetSIPDomains", null, false, true);
        }
        
        /// <summary>
        /// Ruft eine EntityQuery-Instanz ab, die verwendet werden kann, um <see cref="SIPProviderBinding"/>-Entitätsinstanzen mithilfe der "GetSIPProviderBindings"-Abfrage zu laden.
        /// </summary>
        /// <returns>Eine EntityQuery, die geladen werden kann, um die <see cref="SIPProviderBinding"/>-Entitätsinstanzen abzurufen.</returns>
        public EntityQuery<SIPProviderBinding> GetSIPProviderBindingsQuery()
        {
            this.ValidateMethod("GetSIPProviderBindingsQuery", null);
            return base.CreateQuery<SIPProviderBinding>("GetSIPProviderBindings", null, false, true);
        }
        
        /// <summary>
        /// Ruft eine EntityQuery-Instanz ab, die verwendet werden kann, um <see cref="SIPProvider"/>-Entitätsinstanzen mithilfe der "GetSIPProviders"-Abfrage zu laden.
        /// </summary>
        /// <returns>Eine EntityQuery, die geladen werden kann, um die <see cref="SIPProvider"/>-Entitätsinstanzen abzurufen.</returns>
        public EntityQuery<SIPProvider> GetSIPProvidersQuery()
        {
            this.ValidateMethod("GetSIPProvidersQuery", null);
            return base.CreateQuery<SIPProvider>("GetSIPProviders", null, false, true);
        }
        
        /// <summary>
        /// Ruft eine EntityQuery-Instanz ab, die verwendet werden kann, um <see cref="SIPRegistrarBinding"/>-Entitätsinstanzen mithilfe der "GetSIPRegistrarBindings"-Abfrage zu laden.
        /// </summary>
        /// <returns>Eine EntityQuery, die geladen werden kann, um die <see cref="SIPRegistrarBinding"/>-Entitätsinstanzen abzurufen.</returns>
        public EntityQuery<SIPRegistrarBinding> GetSIPRegistrarBindingsQuery()
        {
            this.ValidateMethod("GetSIPRegistrarBindingsQuery", null);
            return base.CreateQuery<SIPRegistrarBinding>("GetSIPRegistrarBindings", null, false, true);
        }
        
        /// <summary>
        /// Ruft eine EntityQuery-Instanz ab, die verwendet werden kann, um <see cref="User"/>-Entitätsinstanzen mithilfe der "GetUser"-Abfrage zu laden.
        /// </summary>
        /// <returns>Eine EntityQuery, die geladen werden kann, um die <see cref="User"/>-Entitätsinstanzen abzurufen.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Ruft eine EntityQuery-Instanz ab, die verwendet werden kann, um <see cref="User"/>-Entitätsinstanzen mithilfe der "Login"-Abfrage zu laden.
        /// </summary>
        /// <param name="username">Der Wert für den "username"-Parameter der Abfrage.</param>
        /// <param name="password">Der Wert für den "password"-Parameter der Abfrage.</param>
        /// <param name="isPersistent">Der Wert für den "isPersistent"-Parameter der Abfrage.</param>
        /// <param name="customData">Der Wert für den "customData"-Parameter der Abfrage.</param>
        /// <returns>Eine EntityQuery, die geladen werden kann, um die <see cref="User"/>-Entitätsinstanzen abzurufen.</returns>
        public EntityQuery<User> LoginQuery(string username, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("username", username);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Ruft eine EntityQuery-Instanz ab, die verwendet werden kann, um <see cref="User"/>-Entitätsinstanzen mithilfe der "Logout"-Abfrage zu laden.
        /// </summary>
        /// <returns>Eine EntityQuery, die geladen werden kann, um die <see cref="User"/>-Entitätsinstanzen abzurufen.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Ruft die "ChangePassword"-Methode des DomainService asynchron auf.
        /// </summary>
        /// <param name="oldPassword">Der Wert für den "oldPassword"-Parameter dieser Aktion.</param>
        /// <param name="newPassword">Der Wert für den "newPassword"-Parameter dieser Aktion.</param>
        /// <param name="callback">Der beim Abschluss des Vorgangs aufzurufende Rückruf.</param>
        /// <param name="userState">Der Wert, der an den Rückruf übergeben wird.  Kann <c>null</c> sein.</param>
        /// <returns>Eine Vorgangsinstanz, die verwendet werden kann, um die asynchrone Anforderung zu verwalten.</returns>
        public InvokeOperation ChangePassword(string oldPassword, string newPassword, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("oldPassword", oldPassword);
            parameters.Add("newPassword", newPassword);
            this.ValidateMethod("ChangePassword", parameters);
            return this.InvokeOperation("ChangePassword", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Ruft die "ChangePassword"-Methode des DomainService asynchron auf.
        /// </summary>
        /// <param name="oldPassword">Der Wert für den "oldPassword"-Parameter dieser Aktion.</param>
        /// <param name="newPassword">Der Wert für den "newPassword"-Parameter dieser Aktion.</param>
        /// <returns>Eine Vorgangsinstanz, die verwendet werden kann, um die asynchrone Anforderung zu verwalten.</returns>
        public InvokeOperation ChangePassword(string oldPassword, string newPassword)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("oldPassword", oldPassword);
            parameters.Add("newPassword", newPassword);
            this.ValidateMethod("ChangePassword", parameters);
            return this.InvokeOperation("ChangePassword", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Ruft die "ChangeSIPDialplanName"-Methode des DomainService asynchron auf.
        /// </summary>
        /// <param name="sipDialplanID">Der Wert für den "sipDialplanID"-Parameter dieser Aktion.</param>
        /// <param name="name">Der Wert für den "name"-Parameter dieser Aktion.</param>
        /// <param name="callback">Der beim Abschluss des Vorgangs aufzurufende Rückruf.</param>
        /// <param name="userState">Der Wert, der an den Rückruf übergeben wird.  Kann <c>null</c> sein.</param>
        /// <returns>Eine Vorgangsinstanz, die verwendet werden kann, um die asynchrone Anforderung zu verwalten.</returns>
        public InvokeOperation ChangeSIPDialplanName(string sipDialplanID, string name, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sipDialplanID", sipDialplanID);
            parameters.Add("name", name);
            this.ValidateMethod("ChangeSIPDialplanName", parameters);
            return this.InvokeOperation("ChangeSIPDialplanName", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Ruft die "ChangeSIPDialplanName"-Methode des DomainService asynchron auf.
        /// </summary>
        /// <param name="sipDialplanID">Der Wert für den "sipDialplanID"-Parameter dieser Aktion.</param>
        /// <param name="name">Der Wert für den "name"-Parameter dieser Aktion.</param>
        /// <returns>Eine Vorgangsinstanz, die verwendet werden kann, um die asynchrone Anforderung zu verwalten.</returns>
        public InvokeOperation ChangeSIPDialplanName(string sipDialplanID, string name)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sipDialplanID", sipDialplanID);
            parameters.Add("name", name);
            this.ValidateMethod("ChangeSIPDialplanName", parameters);
            return this.InvokeOperation("ChangeSIPDialplanName", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Ruft die "CopySIPDialplan"-Methode des DomainService asynchron auf.
        /// </summary>
        /// <param name="sipDialplanID">Der Wert für den "sipDialplanID"-Parameter dieser Aktion.</param>
        /// <param name="callback">Der beim Abschluss des Vorgangs aufzurufende Rückruf.</param>
        /// <param name="userState">Der Wert, der an den Rückruf übergeben wird.  Kann <c>null</c> sein.</param>
        /// <returns>Eine Vorgangsinstanz, die verwendet werden kann, um die asynchrone Anforderung zu verwalten.</returns>
        public InvokeOperation CopySIPDialplan(string sipDialplanID, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sipDialplanID", sipDialplanID);
            this.ValidateMethod("CopySIPDialplan", parameters);
            return this.InvokeOperation("CopySIPDialplan", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Ruft die "CopySIPDialplan"-Methode des DomainService asynchron auf.
        /// </summary>
        /// <param name="sipDialplanID">Der Wert für den "sipDialplanID"-Parameter dieser Aktion.</param>
        /// <returns>Eine Vorgangsinstanz, die verwendet werden kann, um die asynchrone Anforderung zu verwalten.</returns>
        public InvokeOperation CopySIPDialplan(string sipDialplanID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sipDialplanID", sipDialplanID);
            this.ValidateMethod("CopySIPDialplan", parameters);
            return this.InvokeOperation("CopySIPDialplan", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Ruft die "GetTimeZoneOffsetMinutes"-Methode des DomainService asynchron auf.
        /// </summary>
        /// <param name="callback">Der beim Abschluss des Vorgangs aufzurufende Rückruf.</param>
        /// <param name="userState">Der Wert, der an den Rückruf übergeben wird.  Kann <c>null</c> sein.</param>
        /// <returns>Eine Vorgangsinstanz, die verwendet werden kann, um die asynchrone Anforderung zu verwalten.</returns>
        public InvokeOperation<int> GetTimeZoneOffsetMinutes(Action<InvokeOperation<int>> callback, object userState)
        {
            this.ValidateMethod("GetTimeZoneOffsetMinutes", null);
            return ((InvokeOperation<int>)(this.InvokeOperation("GetTimeZoneOffsetMinutes", typeof(int), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Ruft die "GetTimeZoneOffsetMinutes"-Methode des DomainService asynchron auf.
        /// </summary>
        /// <returns>Eine Vorgangsinstanz, die verwendet werden kann, um die asynchrone Anforderung zu verwalten.</returns>
        public InvokeOperation<int> GetTimeZoneOffsetMinutes()
        {
            this.ValidateMethod("GetTimeZoneOffsetMinutes", null);
            return ((InvokeOperation<int>)(this.InvokeOperation("GetTimeZoneOffsetMinutes", typeof(int), null, true, null, null)));
        }
        
        /// <summary>
        /// Ruft die "GetTimeZones"-Methode des DomainService asynchron auf.
        /// </summary>
        /// <param name="callback">Der beim Abschluss des Vorgangs aufzurufende Rückruf.</param>
        /// <param name="userState">Der Wert, der an den Rückruf übergeben wird.  Kann <c>null</c> sein.</param>
        /// <returns>Eine Vorgangsinstanz, die verwendet werden kann, um die asynchrone Anforderung zu verwalten.</returns>
        public InvokeOperation<IEnumerable<string>> GetTimeZones(Action<InvokeOperation<IEnumerable<string>>> callback, object userState)
        {
            this.ValidateMethod("GetTimeZones", null);
            return ((InvokeOperation<IEnumerable<string>>)(this.InvokeOperation("GetTimeZones", typeof(IEnumerable<string>), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Ruft die "GetTimeZones"-Methode des DomainService asynchron auf.
        /// </summary>
        /// <returns>Eine Vorgangsinstanz, die verwendet werden kann, um die asynchrone Anforderung zu verwalten.</returns>
        public InvokeOperation<IEnumerable<string>> GetTimeZones()
        {
            this.ValidateMethod("GetTimeZones", null);
            return ((InvokeOperation<IEnumerable<string>>)(this.InvokeOperation("GetTimeZones", typeof(IEnumerable<string>), null, true, null, null)));
        }
        
        /// <summary>
        /// Ruft die "IsAlive"-Methode des DomainService asynchron auf.
        /// </summary>
        /// <param name="callback">Der beim Abschluss des Vorgangs aufzurufende Rückruf.</param>
        /// <param name="userState">Der Wert, der an den Rückruf übergeben wird.  Kann <c>null</c> sein.</param>
        /// <returns>Eine Vorgangsinstanz, die verwendet werden kann, um die asynchrone Anforderung zu verwalten.</returns>
        public InvokeOperation<bool> IsAlive(Action<InvokeOperation<bool>> callback, object userState)
        {
            this.ValidateMethod("IsAlive", null);
            return ((InvokeOperation<bool>)(this.InvokeOperation("IsAlive", typeof(bool), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Ruft die "IsAlive"-Methode des DomainService asynchron auf.
        /// </summary>
        /// <returns>Eine Vorgangsinstanz, die verwendet werden kann, um die asynchrone Anforderung zu verwalten.</returns>
        public InvokeOperation<bool> IsAlive()
        {
            this.ValidateMethod("IsAlive", null);
            return ((InvokeOperation<bool>)(this.InvokeOperation("IsAlive", typeof(bool), null, true, null, null)));
        }
        
        /// <summary>
        /// Erstellt einen neuen EntityContainer für die EntitySets dieses DomainContext
        /// </summary>
        /// <returns>Eine neue Containerinstanz.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new SIPEntitiesDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service-Vertrag für den DomainService "SIPEntitiesDomainService".
        /// </summary>
        [ServiceContract()]
        public interface ISIPEntitiesDomainServiceContract
        {
            
            /// <summary>
            /// Ruft den Vorgang "ChangePassword" asynchron auf.
            /// </summary>
            /// <param name="oldPassword">Der Wert für den "oldPassword"-Parameter dieser Aktion.</param>
            /// <param name="newPassword">Der Wert für den "newPassword"-Parameter dieser Aktion.</param>
            /// <param name="callback">Der beim Abschluss aufzurufende Rückruf.</param>
            /// <param name="asyncState">Optionales Zustandsobjekt.</param>
            /// <returns>Ein IAsyncResult, das zum Überwachen der Anforderung verwendet werden kann.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SIPEntitiesDomainService/ChangePasswordDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SIPEntitiesDomainService/ChangePassword", ReplyAction="http://tempuri.org/SIPEntitiesDomainService/ChangePasswordResponse")]
            IAsyncResult BeginChangePassword(string oldPassword, string newPassword, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Vervollständigt den asynchronen Vorgang, der durch "BeginChangePassword" gestartet wurde.
            /// </summary>
            /// <param name="result">Das von "BeginChangePassword" zurückgegebene IAsyncResult.</param>
            void EndChangePassword(IAsyncResult result);
            
            /// <summary>
            /// Ruft den Vorgang "ChangeSIPDialplanName" asynchron auf.
            /// </summary>
            /// <param name="sipDialplanID">Der Wert für den "sipDialplanID"-Parameter dieser Aktion.</param>
            /// <param name="name">Der Wert für den "name"-Parameter dieser Aktion.</param>
            /// <param name="callback">Der beim Abschluss aufzurufende Rückruf.</param>
            /// <param name="asyncState">Optionales Zustandsobjekt.</param>
            /// <returns>Ein IAsyncResult, das zum Überwachen der Anforderung verwendet werden kann.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SIPEntitiesDomainService/ChangeSIPDialplanNameDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SIPEntitiesDomainService/ChangeSIPDialplanName", ReplyAction="http://tempuri.org/SIPEntitiesDomainService/ChangeSIPDialplanNameResponse")]
            IAsyncResult BeginChangeSIPDialplanName(string sipDialplanID, string name, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Vervollständigt den asynchronen Vorgang, der durch "BeginChangeSIPDialplanName" gestartet wurde.
            /// </summary>
            /// <param name="result">Das von "BeginChangeSIPDialplanName" zurückgegebene IAsyncResult.</param>
            void EndChangeSIPDialplanName(IAsyncResult result);
            
            /// <summary>
            /// Ruft den Vorgang "CopySIPDialplan" asynchron auf.
            /// </summary>
            /// <param name="sipDialplanID">Der Wert für den "sipDialplanID"-Parameter dieser Aktion.</param>
            /// <param name="callback">Der beim Abschluss aufzurufende Rückruf.</param>
            /// <param name="asyncState">Optionales Zustandsobjekt.</param>
            /// <returns>Ein IAsyncResult, das zum Überwachen der Anforderung verwendet werden kann.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SIPEntitiesDomainService/CopySIPDialplanDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SIPEntitiesDomainService/CopySIPDialplan", ReplyAction="http://tempuri.org/SIPEntitiesDomainService/CopySIPDialplanResponse")]
            IAsyncResult BeginCopySIPDialplan(string sipDialplanID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Vervollständigt den asynchronen Vorgang, der durch "BeginCopySIPDialplan" gestartet wurde.
            /// </summary>
            /// <param name="result">Das von "BeginCopySIPDialplan" zurückgegebene IAsyncResult.</param>
            void EndCopySIPDialplan(IAsyncResult result);
            
            /// <summary>
            /// Ruft den Vorgang "GetCDRs" asynchron auf.
            /// </summary>
            /// <param name="callback">Der beim Abschluss aufzurufende Rückruf.</param>
            /// <param name="asyncState">Optionales Zustandsobjekt.</param>
            /// <returns>Ein IAsyncResult, das zum Überwachen der Anforderung verwendet werden kann.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SIPEntitiesDomainService/GetCDRsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SIPEntitiesDomainService/GetCDRs", ReplyAction="http://tempuri.org/SIPEntitiesDomainService/GetCDRsResponse")]
            [WebGet()]
            IAsyncResult BeginGetCDRs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Vervollständigt den asynchronen Vorgang, der durch "BeginGetCDRs" gestartet wurde.
            /// </summary>
            /// <param name="result">Das von "BeginGetCDRs" zurückgegebene IAsyncResult.</param>
            /// <returns>Das vom Vorgang "GetCDRs" zurückgegebene "QueryResult".</returns>
            QueryResult<CDR> EndGetCDRs(IAsyncResult result);
            
            /// <summary>
            /// Ruft den Vorgang "GetCustomer" asynchron auf.
            /// </summary>
            /// <param name="callback">Der beim Abschluss aufzurufende Rückruf.</param>
            /// <param name="asyncState">Optionales Zustandsobjekt.</param>
            /// <returns>Ein IAsyncResult, das zum Überwachen der Anforderung verwendet werden kann.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SIPEntitiesDomainService/GetCustomerDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SIPEntitiesDomainService/GetCustomer", ReplyAction="http://tempuri.org/SIPEntitiesDomainService/GetCustomerResponse")]
            [WebGet()]
            IAsyncResult BeginGetCustomer(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Vervollständigt den asynchronen Vorgang, der durch "BeginGetCustomer" gestartet wurde.
            /// </summary>
            /// <param name="result">Das von "BeginGetCustomer" zurückgegebene IAsyncResult.</param>
            /// <returns>Das vom Vorgang "GetCustomer" zurückgegebene "QueryResult".</returns>
            QueryResult<Customer> EndGetCustomer(IAsyncResult result);
            
            /// <summary>
            /// Ruft den Vorgang "GetSimpleWizardRules" asynchron auf.
            /// </summary>
            /// <param name="callback">Der beim Abschluss aufzurufende Rückruf.</param>
            /// <param name="asyncState">Optionales Zustandsobjekt.</param>
            /// <returns>Ein IAsyncResult, das zum Überwachen der Anforderung verwendet werden kann.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SIPEntitiesDomainService/GetSimpleWizardRulesDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SIPEntitiesDomainService/GetSimpleWizardRules", ReplyAction="http://tempuri.org/SIPEntitiesDomainService/GetSimpleWizardRulesResponse")]
            [WebGet()]
            IAsyncResult BeginGetSimpleWizardRules(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Vervollständigt den asynchronen Vorgang, der durch "BeginGetSimpleWizardRules" gestartet wurde.
            /// </summary>
            /// <param name="result">Das von "BeginGetSimpleWizardRules" zurückgegebene IAsyncResult.</param>
            /// <returns>Das vom Vorgang "GetSimpleWizardRules" zurückgegebene "QueryResult".</returns>
            QueryResult<SimpleWizardRule> EndGetSimpleWizardRules(IAsyncResult result);
            
            /// <summary>
            /// Ruft den Vorgang "GetSIPAccounts" asynchron auf.
            /// </summary>
            /// <param name="callback">Der beim Abschluss aufzurufende Rückruf.</param>
            /// <param name="asyncState">Optionales Zustandsobjekt.</param>
            /// <returns>Ein IAsyncResult, das zum Überwachen der Anforderung verwendet werden kann.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SIPEntitiesDomainService/GetSIPAccountsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SIPEntitiesDomainService/GetSIPAccounts", ReplyAction="http://tempuri.org/SIPEntitiesDomainService/GetSIPAccountsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSIPAccounts(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Vervollständigt den asynchronen Vorgang, der durch "BeginGetSIPAccounts" gestartet wurde.
            /// </summary>
            /// <param name="result">Das von "BeginGetSIPAccounts" zurückgegebene IAsyncResult.</param>
            /// <returns>Das vom Vorgang "GetSIPAccounts" zurückgegebene "QueryResult".</returns>
            QueryResult<SIPAccount> EndGetSIPAccounts(IAsyncResult result);
            
            /// <summary>
            /// Ruft den Vorgang "GetSIPDialogues" asynchron auf.
            /// </summary>
            /// <param name="callback">Der beim Abschluss aufzurufende Rückruf.</param>
            /// <param name="asyncState">Optionales Zustandsobjekt.</param>
            /// <returns>Ein IAsyncResult, das zum Überwachen der Anforderung verwendet werden kann.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SIPEntitiesDomainService/GetSIPDialoguesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SIPEntitiesDomainService/GetSIPDialogues", ReplyAction="http://tempuri.org/SIPEntitiesDomainService/GetSIPDialoguesResponse")]
            [WebGet()]
            IAsyncResult BeginGetSIPDialogues(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Vervollständigt den asynchronen Vorgang, der durch "BeginGetSIPDialogues" gestartet wurde.
            /// </summary>
            /// <param name="result">Das von "BeginGetSIPDialogues" zurückgegebene IAsyncResult.</param>
            /// <returns>Das vom Vorgang "GetSIPDialogues" zurückgegebene "QueryResult".</returns>
            QueryResult<SIPDialogue> EndGetSIPDialogues(IAsyncResult result);
            
            /// <summary>
            /// Ruft den Vorgang "GetSIPDialplanLookups" asynchron auf.
            /// </summary>
            /// <param name="callback">Der beim Abschluss aufzurufende Rückruf.</param>
            /// <param name="asyncState">Optionales Zustandsobjekt.</param>
            /// <returns>Ein IAsyncResult, das zum Überwachen der Anforderung verwendet werden kann.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SIPEntitiesDomainService/GetSIPDialplanLookupsDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SIPEntitiesDomainService/GetSIPDialplanLookups", ReplyAction="http://tempuri.org/SIPEntitiesDomainService/GetSIPDialplanLookupsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSIPDialplanLookups(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Vervollständigt den asynchronen Vorgang, der durch "BeginGetSIPDialplanLookups" gestartet wurde.
            /// </summary>
            /// <param name="result">Das von "BeginGetSIPDialplanLookups" zurückgegebene IAsyncResult.</param>
            /// <returns>Das vom Vorgang "GetSIPDialplanLookups" zurückgegebene "QueryResult".</returns>
            QueryResult<SIPDialplanLookup> EndGetSIPDialplanLookups(IAsyncResult result);
            
            /// <summary>
            /// Ruft den Vorgang "GetSIPDialplanOptions" asynchron auf.
            /// </summary>
            /// <param name="callback">Der beim Abschluss aufzurufende Rückruf.</param>
            /// <param name="asyncState">Optionales Zustandsobjekt.</param>
            /// <returns>Ein IAsyncResult, das zum Überwachen der Anforderung verwendet werden kann.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SIPEntitiesDomainService/GetSIPDialplanOptionsDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SIPEntitiesDomainService/GetSIPDialplanOptions", ReplyAction="http://tempuri.org/SIPEntitiesDomainService/GetSIPDialplanOptionsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSIPDialplanOptions(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Vervollständigt den asynchronen Vorgang, der durch "BeginGetSIPDialplanOptions" gestartet wurde.
            /// </summary>
            /// <param name="result">Das von "BeginGetSIPDialplanOptions" zurückgegebene IAsyncResult.</param>
            /// <returns>Das vom Vorgang "GetSIPDialplanOptions" zurückgegebene "QueryResult".</returns>
            QueryResult<SIPDialplanOption> EndGetSIPDialplanOptions(IAsyncResult result);
            
            /// <summary>
            /// Ruft den Vorgang "GetSIPDialplanProviders" asynchron auf.
            /// </summary>
            /// <param name="callback">Der beim Abschluss aufzurufende Rückruf.</param>
            /// <param name="asyncState">Optionales Zustandsobjekt.</param>
            /// <returns>Ein IAsyncResult, das zum Überwachen der Anforderung verwendet werden kann.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SIPEntitiesDomainService/GetSIPDialplanProvidersDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SIPEntitiesDomainService/GetSIPDialplanProviders", ReplyAction="http://tempuri.org/SIPEntitiesDomainService/GetSIPDialplanProvidersResponse")]
            [WebGet()]
            IAsyncResult BeginGetSIPDialplanProviders(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Vervollständigt den asynchronen Vorgang, der durch "BeginGetSIPDialplanProviders" gestartet wurde.
            /// </summary>
            /// <param name="result">Das von "BeginGetSIPDialplanProviders" zurückgegebene IAsyncResult.</param>
            /// <returns>Das vom Vorgang "GetSIPDialplanProviders" zurückgegebene "QueryResult".</returns>
            QueryResult<SIPDialplanProvider> EndGetSIPDialplanProviders(IAsyncResult result);
            
            /// <summary>
            /// Ruft den Vorgang "GetSIPDialplanRoutes" asynchron auf.
            /// </summary>
            /// <param name="callback">Der beim Abschluss aufzurufende Rückruf.</param>
            /// <param name="asyncState">Optionales Zustandsobjekt.</param>
            /// <returns>Ein IAsyncResult, das zum Überwachen der Anforderung verwendet werden kann.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SIPEntitiesDomainService/GetSIPDialplanRoutesDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SIPEntitiesDomainService/GetSIPDialplanRoutes", ReplyAction="http://tempuri.org/SIPEntitiesDomainService/GetSIPDialplanRoutesResponse")]
            [WebGet()]
            IAsyncResult BeginGetSIPDialplanRoutes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Vervollständigt den asynchronen Vorgang, der durch "BeginGetSIPDialplanRoutes" gestartet wurde.
            /// </summary>
            /// <param name="result">Das von "BeginGetSIPDialplanRoutes" zurückgegebene IAsyncResult.</param>
            /// <returns>Das vom Vorgang "GetSIPDialplanRoutes" zurückgegebene "QueryResult".</returns>
            QueryResult<SIPDialplanRoute> EndGetSIPDialplanRoutes(IAsyncResult result);
            
            /// <summary>
            /// Ruft den Vorgang "GetSIPDialplans" asynchron auf.
            /// </summary>
            /// <param name="callback">Der beim Abschluss aufzurufende Rückruf.</param>
            /// <param name="asyncState">Optionales Zustandsobjekt.</param>
            /// <returns>Ein IAsyncResult, das zum Überwachen der Anforderung verwendet werden kann.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SIPEntitiesDomainService/GetSIPDialplansDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SIPEntitiesDomainService/GetSIPDialplans", ReplyAction="http://tempuri.org/SIPEntitiesDomainService/GetSIPDialplansResponse")]
            [WebGet()]
            IAsyncResult BeginGetSIPDialplans(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Vervollständigt den asynchronen Vorgang, der durch "BeginGetSIPDialplans" gestartet wurde.
            /// </summary>
            /// <param name="result">Das von "BeginGetSIPDialplans" zurückgegebene IAsyncResult.</param>
            /// <returns>Das vom Vorgang "GetSIPDialplans" zurückgegebene "QueryResult".</returns>
            QueryResult<SIPDialPlan> EndGetSIPDialplans(IAsyncResult result);
            
            /// <summary>
            /// Ruft den Vorgang "GetSIPDomains" asynchron auf.
            /// </summary>
            /// <param name="callback">Der beim Abschluss aufzurufende Rückruf.</param>
            /// <param name="asyncState">Optionales Zustandsobjekt.</param>
            /// <returns>Ein IAsyncResult, das zum Überwachen der Anforderung verwendet werden kann.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SIPEntitiesDomainService/GetSIPDomainsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SIPEntitiesDomainService/GetSIPDomains", ReplyAction="http://tempuri.org/SIPEntitiesDomainService/GetSIPDomainsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSIPDomains(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Vervollständigt den asynchronen Vorgang, der durch "BeginGetSIPDomains" gestartet wurde.
            /// </summary>
            /// <param name="result">Das von "BeginGetSIPDomains" zurückgegebene IAsyncResult.</param>
            /// <returns>Das vom Vorgang "GetSIPDomains" zurückgegebene "QueryResult".</returns>
            QueryResult<SIPDomain> EndGetSIPDomains(IAsyncResult result);
            
            /// <summary>
            /// Ruft den Vorgang "GetSIPProviderBindings" asynchron auf.
            /// </summary>
            /// <param name="callback">Der beim Abschluss aufzurufende Rückruf.</param>
            /// <param name="asyncState">Optionales Zustandsobjekt.</param>
            /// <returns>Ein IAsyncResult, das zum Überwachen der Anforderung verwendet werden kann.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SIPEntitiesDomainService/GetSIPProviderBindingsDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SIPEntitiesDomainService/GetSIPProviderBindings", ReplyAction="http://tempuri.org/SIPEntitiesDomainService/GetSIPProviderBindingsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSIPProviderBindings(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Vervollständigt den asynchronen Vorgang, der durch "BeginGetSIPProviderBindings" gestartet wurde.
            /// </summary>
            /// <param name="result">Das von "BeginGetSIPProviderBindings" zurückgegebene IAsyncResult.</param>
            /// <returns>Das vom Vorgang "GetSIPProviderBindings" zurückgegebene "QueryResult".</returns>
            QueryResult<SIPProviderBinding> EndGetSIPProviderBindings(IAsyncResult result);
            
            /// <summary>
            /// Ruft den Vorgang "GetSIPProviders" asynchron auf.
            /// </summary>
            /// <param name="callback">Der beim Abschluss aufzurufende Rückruf.</param>
            /// <param name="asyncState">Optionales Zustandsobjekt.</param>
            /// <returns>Ein IAsyncResult, das zum Überwachen der Anforderung verwendet werden kann.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SIPEntitiesDomainService/GetSIPProvidersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SIPEntitiesDomainService/GetSIPProviders", ReplyAction="http://tempuri.org/SIPEntitiesDomainService/GetSIPProvidersResponse")]
            [WebGet()]
            IAsyncResult BeginGetSIPProviders(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Vervollständigt den asynchronen Vorgang, der durch "BeginGetSIPProviders" gestartet wurde.
            /// </summary>
            /// <param name="result">Das von "BeginGetSIPProviders" zurückgegebene IAsyncResult.</param>
            /// <returns>Das vom Vorgang "GetSIPProviders" zurückgegebene "QueryResult".</returns>
            QueryResult<SIPProvider> EndGetSIPProviders(IAsyncResult result);
            
            /// <summary>
            /// Ruft den Vorgang "GetSIPRegistrarBindings" asynchron auf.
            /// </summary>
            /// <param name="callback">Der beim Abschluss aufzurufende Rückruf.</param>
            /// <param name="asyncState">Optionales Zustandsobjekt.</param>
            /// <returns>Ein IAsyncResult, das zum Überwachen der Anforderung verwendet werden kann.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SIPEntitiesDomainService/GetSIPRegistrarBindingsDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SIPEntitiesDomainService/GetSIPRegistrarBindings", ReplyAction="http://tempuri.org/SIPEntitiesDomainService/GetSIPRegistrarBindingsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSIPRegistrarBindings(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Vervollständigt den asynchronen Vorgang, der durch "BeginGetSIPRegistrarBindings" gestartet wurde.
            /// </summary>
            /// <param name="result">Das von "BeginGetSIPRegistrarBindings" zurückgegebene IAsyncResult.</param>
            /// <returns>Das vom Vorgang "GetSIPRegistrarBindings" zurückgegebene "QueryResult".</returns>
            QueryResult<SIPRegistrarBinding> EndGetSIPRegistrarBindings(IAsyncResult result);
            
            /// <summary>
            /// Ruft den Vorgang "GetTimeZoneOffsetMinutes" asynchron auf.
            /// </summary>
            /// <param name="callback">Der beim Abschluss aufzurufende Rückruf.</param>
            /// <param name="asyncState">Optionales Zustandsobjekt.</param>
            /// <returns>Ein IAsyncResult, das zum Überwachen der Anforderung verwendet werden kann.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SIPEntitiesDomainService/GetTimeZoneOffsetMinutesDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SIPEntitiesDomainService/GetTimeZoneOffsetMinutes", ReplyAction="http://tempuri.org/SIPEntitiesDomainService/GetTimeZoneOffsetMinutesResponse")]
            IAsyncResult BeginGetTimeZoneOffsetMinutes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Vervollständigt den asynchronen Vorgang, der durch "BeginGetTimeZoneOffsetMinutes" gestartet wurde.
            /// </summary>
            /// <param name="result">Das von "BeginGetTimeZoneOffsetMinutes" zurückgegebene IAsyncResult.</param>
            /// <returns>Das vom Vorgang "GetTimeZoneOffsetMinutes" zurückgegebene "Int32".</returns>
            int EndGetTimeZoneOffsetMinutes(IAsyncResult result);
            
            /// <summary>
            /// Ruft den Vorgang "GetTimeZones" asynchron auf.
            /// </summary>
            /// <param name="callback">Der beim Abschluss aufzurufende Rückruf.</param>
            /// <param name="asyncState">Optionales Zustandsobjekt.</param>
            /// <returns>Ein IAsyncResult, das zum Überwachen der Anforderung verwendet werden kann.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SIPEntitiesDomainService/GetTimeZonesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SIPEntitiesDomainService/GetTimeZones", ReplyAction="http://tempuri.org/SIPEntitiesDomainService/GetTimeZonesResponse")]
            IAsyncResult BeginGetTimeZones(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Vervollständigt den asynchronen Vorgang, der durch "BeginGetTimeZones" gestartet wurde.
            /// </summary>
            /// <param name="result">Das von "BeginGetTimeZones" zurückgegebene IAsyncResult.</param>
            /// <returns>Das vom Vorgang "GetTimeZones" zurückgegebene "IEnumerable`1".</returns>
            IEnumerable<string> EndGetTimeZones(IAsyncResult result);
            
            /// <summary>
            /// Ruft den Vorgang "GetUser" asynchron auf.
            /// </summary>
            /// <param name="callback">Der beim Abschluss aufzurufende Rückruf.</param>
            /// <param name="asyncState">Optionales Zustandsobjekt.</param>
            /// <returns>Ein IAsyncResult, das zum Überwachen der Anforderung verwendet werden kann.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SIPEntitiesDomainService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SIPEntitiesDomainService/GetUser", ReplyAction="http://tempuri.org/SIPEntitiesDomainService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Vervollständigt den asynchronen Vorgang, der durch "BeginGetUser" gestartet wurde.
            /// </summary>
            /// <param name="result">Das von "BeginGetUser" zurückgegebene IAsyncResult.</param>
            /// <returns>Das vom Vorgang "GetUser" zurückgegebene "QueryResult".</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Ruft den Vorgang "IsAlive" asynchron auf.
            /// </summary>
            /// <param name="callback">Der beim Abschluss aufzurufende Rückruf.</param>
            /// <param name="asyncState">Optionales Zustandsobjekt.</param>
            /// <returns>Ein IAsyncResult, das zum Überwachen der Anforderung verwendet werden kann.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SIPEntitiesDomainService/IsAliveDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SIPEntitiesDomainService/IsAlive", ReplyAction="http://tempuri.org/SIPEntitiesDomainService/IsAliveResponse")]
            IAsyncResult BeginIsAlive(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Vervollständigt den asynchronen Vorgang, der durch "BeginIsAlive" gestartet wurde.
            /// </summary>
            /// <param name="result">Das von "BeginIsAlive" zurückgegebene IAsyncResult.</param>
            /// <returns>Das vom Vorgang "IsAlive" zurückgegebene "Boolean".</returns>
            bool EndIsAlive(IAsyncResult result);
            
            /// <summary>
            /// Ruft den Vorgang "Login" asynchron auf.
            /// </summary>
            /// <param name="username">Der Wert für den "username"-Parameter dieser Aktion.</param>
            /// <param name="password">Der Wert für den "password"-Parameter dieser Aktion.</param>
            /// <param name="isPersistent">Der Wert für den "isPersistent"-Parameter dieser Aktion.</param>
            /// <param name="customData">Der Wert für den "customData"-Parameter dieser Aktion.</param>
            /// <param name="callback">Der beim Abschluss aufzurufende Rückruf.</param>
            /// <param name="asyncState">Optionales Zustandsobjekt.</param>
            /// <returns>Ein IAsyncResult, das zum Überwachen der Anforderung verwendet werden kann.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SIPEntitiesDomainService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SIPEntitiesDomainService/Login", ReplyAction="http://tempuri.org/SIPEntitiesDomainService/LoginResponse")]
            IAsyncResult BeginLogin(string username, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Vervollständigt den asynchronen Vorgang, der durch "BeginLogin" gestartet wurde.
            /// </summary>
            /// <param name="result">Das von "BeginLogin" zurückgegebene IAsyncResult.</param>
            /// <returns>Das vom Vorgang "Login" zurückgegebene "QueryResult".</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Ruft den Vorgang "Logout" asynchron auf.
            /// </summary>
            /// <param name="callback">Der beim Abschluss aufzurufende Rückruf.</param>
            /// <param name="asyncState">Optionales Zustandsobjekt.</param>
            /// <returns>Ein IAsyncResult, das zum Überwachen der Anforderung verwendet werden kann.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SIPEntitiesDomainService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SIPEntitiesDomainService/Logout", ReplyAction="http://tempuri.org/SIPEntitiesDomainService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Vervollständigt den asynchronen Vorgang, der durch "BeginLogout" gestartet wurde.
            /// </summary>
            /// <param name="result">Das von "BeginLogout" zurückgegebene IAsyncResult.</param>
            /// <returns>Das vom Vorgang "Logout" zurückgegebene "QueryResult".</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Ruft den Vorgang "SubmitChanges" asynchron auf.
            /// </summary>
            /// <param name="changeSet">Das zu sendende Changeset.</param>
            /// <param name="callback">Der beim Abschluss aufzurufende Rückruf.</param>
            /// <param name="asyncState">Optionales Zustandsobjekt.</param>
            /// <returns>Ein IAsyncResult, das zum Überwachen der Anforderung verwendet werden kann.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SIPEntitiesDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SIPEntitiesDomainService/SubmitChanges", ReplyAction="http://tempuri.org/SIPEntitiesDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Vervollständigt den asynchronen Vorgang, der durch "BeginSubmitChanges" gestartet wurde.
            /// </summary>
            /// <param name="result">Das von "BeginSubmitChanges" zurückgegebene IAsyncResult.</param>
            /// <returns>Die Auflistung von Changeset-Eintragselementen, die von SubmitChanges zurückgegeben wurde.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class SIPEntitiesDomainContextEntityContainer : EntityContainer
        {
            
            public SIPEntitiesDomainContextEntityContainer()
            {
                this.CreateEntitySet<CDR>(EntitySetOperations.None);
                this.CreateEntitySet<Customer>(EntitySetOperations.All);
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
                this.CreateEntitySet<SimpleWizardRule>(EntitySetOperations.All);
                this.CreateEntitySet<SIPAccount>(EntitySetOperations.All);
                this.CreateEntitySet<SIPDialogue>(EntitySetOperations.None);
                this.CreateEntitySet<SIPDialPlan>(EntitySetOperations.All);
                this.CreateEntitySet<SIPDialplanLookup>(EntitySetOperations.All);
                this.CreateEntitySet<SIPDialplanOption>(EntitySetOperations.All);
                this.CreateEntitySet<SIPDialplanProvider>(EntitySetOperations.All);
                this.CreateEntitySet<SIPDialplanRoute>(EntitySetOperations.All);
                this.CreateEntitySet<SIPDomain>(EntitySetOperations.None);
                this.CreateEntitySet<SIPProvider>(EntitySetOperations.All);
                this.CreateEntitySet<SIPProviderBinding>(EntitySetOperations.None);
                this.CreateEntitySet<SIPRegistrarBinding>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// Die "User"-Entitätsklasse.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SIPSorcery.Entities.Services")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Definitionen der Extensibility-Methode

        /// <summary>
        /// Diese Methode wird nach Abschluss der Initialisierung vom Konstruktor aufgerufen
        /// und kann für das weitere Objektsetup verwendet werden.
        /// </summary>
        partial void OnCreated();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Initialisiert eine neue Instanz der <see cref="User"/>-Klasse.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Ruft den "Name"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Ruft den "Roles"-Wert ab oder legt ihn fest.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Ruft einen Wert ab, der angibt, ob die Identität authentifiziert wurde.
        /// </summary>
        /// <remarks>
        /// Dieser Wert ist <c>true</c>, wenn <see cref="Name"/> nicht <c>null</c> oder leer ist.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Berechnet einen Wert aus den Schlüsselfeldern, der diese Entitätsinstanz eindeutig identifiziert.
        /// </summary>
        /// <returns>Eine Objektinstanz, die diese Entitätsinstanz eindeutig identifiziert.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Gibt zurück, ob sich der Prinzipal in der Rolle befindet.
        /// </summary>
        /// <remarks>
        /// Gibt zurück, ob sich die angegebene Rolle in den Rollen befindet.
        /// Diese Implementierung unterscheidet nach Groß- und Kleinschreibung.
        /// </remarks>
        /// <param name="role">Der Name der Rolle, für die die Mitgliedschaft überprüft wird.</param>
        /// <returns>Ob sich der Prinzipal in der Rolle befindet.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
}
